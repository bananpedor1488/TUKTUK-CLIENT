import axios from 'axios';

// Configure axios defaults
const apiUrl = process.env.REACT_APP_API_URL || 'https://tuktuk-server.onrender.com/api';
axios.defaults.baseURL = apiUrl;
axios.defaults.timeout = 10000; // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
axios.defaults.withCredentials = true;

// Add request interceptor to include access token
axios.interceptors.request.use(
  (config) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –±—Ä–∞—É–∑–µ—Ä–µ
    if (typeof window !== 'undefined' && window.localStorage) {
      const token = localStorage.getItem('accessToken');
      console.log('üîë Request interceptor:', {
        url: config.url,
        hasToken: !!token,
        tokenPreview: token ? token.substring(0, 20) + '...' : 'none',
        method: config.method
      });
      
      if (token) {
        config.headers.Authorization = `Bearer ${token}`;
        console.log('üîë –î–æ–±–∞–≤–ª–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization –¥–ª—è:', config.url);
      } else {
        console.log('üîë –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞:', config.url);
      }
    } else {
      console.log('üîë –ù–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∏–ª–∏ –Ω–µ—Ç localStorage');
    }
    return config;
  },
  (error) => {
    console.error('üîë Request interceptor error:', error);
    return Promise.reject(error);
  }
);

// Add response interceptor to handle token refresh
axios.interceptors.response.use(
  (response) => response,
  async (error) => {
    const originalRequest = error.config;
    
    console.log('üö® –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', {
      status: error.response?.status,
      url: originalRequest.url,
      method: originalRequest.method,
      hasRetry: originalRequest._retry,
      errorMessage: error.message
    });
    
    // Only retry if it's a 401 error, not already retried, and not a refresh request
    if (error.response?.status === 401 && 
        !originalRequest._retry && 
        !originalRequest.url?.includes('/auth/refresh') &&
        !originalRequest.url?.includes('/auth/login') &&
        !originalRequest.url?.includes('/auth/register')) {
      originalRequest._retry = true;
      
      try {
        console.log('üîÑ –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞:', originalRequest.url);
        
        // –ü–æ–ª—É—á–∞–µ–º refresh token –∏–∑ localStorage –∫–∞–∫ fallback
        const refreshToken = typeof window !== 'undefined' && window.localStorage 
          ? localStorage.getItem('refreshToken') 
          : null;
        
        const refreshData = refreshToken ? { refreshToken } : {};
        
        const response = await axios.post('/auth/refresh', refreshData, {
          withCredentials: true
        });
        console.log('üîÑ –û—Ç–≤–µ—Ç –æ—Ç refresh:', response);
        
        const { accessToken } = response.data;
        if (typeof window !== 'undefined' && window.localStorage) {
          localStorage.setItem('accessToken', accessToken);
          console.log('üîÑ –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ localStorage');
        }
        
        // Retry original request
        originalRequest.headers.Authorization = `Bearer ${accessToken}`;
        console.log('üîÑ –ü–æ–≤—Ç–æ—Ä—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º:', originalRequest.url);
        return axios(originalRequest);
      } catch (refreshError) {
        console.log('‚ùå Refresh –Ω–µ —É–¥–∞–ª—Å—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞:', originalRequest.url, '–°—Ç–∞—Ç—É—Å:', refreshError.response?.status);
        if (typeof window !== 'undefined' && window.localStorage) {
          localStorage.removeItem('accessToken');
          localStorage.removeItem('refreshToken');
        }
        
        // –î–ª—è AI –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω—É—é –æ—à–∏–±–∫—É
        if (originalRequest.url?.includes('/ai/')) {
          const aiError = new Error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ.');
          aiError.response = {
            status: 401,
            data: { error: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ.' }
          };
          return Promise.reject(aiError);
        }
        
        return Promise.reject(refreshError);
      }
    }
    
    return Promise.reject(error);
  }
);

export default axios;
