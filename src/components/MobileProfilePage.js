import React, { useState, useEffect } from 'react';
import { FiArrowLeft, FiUser, FiBell, FiShield, FiLogOut, FiEdit3, FiSave, FiSettings, FiEye, FiVolume2, FiVolumeX, FiBellOff, FiEyeOff, FiCheck, FiX, FiAlertCircle } from 'react-icons/fi';
import ThemeToggle from './ThemeToggle/ThemeToggle';
import axios from '../services/axiosConfig';
import { useToast } from '../contexts/ToastContext';
import { useAuth } from '../contexts/AuthContext';
import { updateTokens } from '../utils/tokenManager';
import styles from './MobileProfilePage.module.css';

const MobileProfilePage = ({ isOpen, onClose, user }) => {
  const [activeSection, setActiveSection] = useState('profile');
  const [originalSettings, setOriginalSettings] = useState({});
  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const [settings, setSettings] = useState({
    // –ü—Ä–æ—Ñ–∏–ª—å
    name: user?.displayName || user?.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
    username: user?.username || '',
    email: user?.email || 'user@example.com',
    bio: user?.bio || '',
    avatar: user?.avatar || null,
    
    // –í–Ω–µ—à–Ω–∏–π –≤–∏–¥
    theme: 'dark',
    fontSize: 'medium',
    animationType: 'slideFromRight',
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    soundEnabled: true,
    notificationsEnabled: true,
    showOnlineStatus: true,
    messagePreview: true,
    vibrationEnabled: true,
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    twoFactorEnabled: false,
    sessionTimeout: 30,
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    autoSave: true,
    autoDownload: false,
    language: 'ru'
  });

  const toast = useToast();
  const { success, error, warning } = toast || {};
  const { updateUser } = useAuth();

  // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    if (user) {
      const newSettings = {
        name: user.displayName || user.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        username: user.username || '',
        email: user.email || 'user@example.com',
        bio: user.bio || '',
        avatar: user.avatar || null,
        theme: 'dark',
        fontSize: 'medium',
        animationType: 'slideFromRight',
        soundEnabled: true,
        notificationsEnabled: true,
        showOnlineStatus: true,
        messagePreview: true,
        vibrationEnabled: true,
        twoFactorEnabled: false,
        sessionTimeout: 30,
        autoSave: true,
        autoDownload: false,
        language: 'ru'
      };
      
      setSettings(newSettings);
      setOriginalSettings(newSettings);
      setHasUnsavedChanges(false);
    }
  }, [user]);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ settings
  useEffect(() => {
    const hasChanges = settings.name !== originalSettings.name ||
                      settings.username !== originalSettings.username ||
                      settings.bio !== originalSettings.bio ||
                      settings.email !== originalSettings.email ||
                      settings.avatar !== originalSettings.avatar;
    
    setHasUnsavedChanges(hasChanges);
  }, [settings, originalSettings]);

  const sections = [
    { id: 'profile', label: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', icon: FiUser },
    { id: 'appearance', label: '–í–Ω–µ—à–Ω–∏–π –≤–∏–¥', icon: FiEye },
    { id: 'notifications', label: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', icon: FiBell },
    { id: 'sound', label: '–ó–≤—É–∫ –∏ –≤–∏–±—Ä–∞—Ü–∏—è', icon: FiVolume2 },
    { id: 'additional', label: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ', icon: FiSettings },
    { id: 'security', label: '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', icon: FiShield }
  ];

  const handleSettingChange = (key, value) => {
    setSettings(prev => ({
      ...prev,
      [key]: value
    }));
  };

  const handleThemeChange = (theme) => {
    handleSettingChange('theme', theme);
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
    document.documentElement.setAttribute('data-theme', theme);
    localStorage.setItem('tuktuk-theme', theme);
  };

  const handleSave = async () => {
    if (!hasUnsavedChanges) {
      if (success) {
        success('–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è', '–í—Å–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ');
      }
      return;
    }

    // Client-side validation
    if (settings.username && settings.username.length < 3) {
      if (error) {
        error('Username –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞', '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏');
      }
      return;
    }

    if (settings.username && !/^[a-zA-Z0-9_]+$/.test(settings.username)) {
      if (error) {
        error('Username –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è', '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏');
      }
      return;
    }

    if (settings.name && settings.name.length > 50) {
      if (error) {
        error('–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤', '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏');
      }
      return;
    }

    if (settings.bio && settings.bio.length > 160) {
      if (error) {
        error('Bio –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 160 —Å–∏–º–≤–æ–ª–æ–≤', '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏');
      }
      return;
    }

    // Check for suspicious patterns
    const suspiciousPatterns = [
      /<script/i,
      /javascript:/i,
      /on\w+\s*=/i,
      /eval\s*\(/i,
      /expression\s*\(/i
    ];

    const fieldsToCheck = [settings.username, settings.name, settings.bio].filter(Boolean);
    for (const field of fieldsToCheck) {
      for (const pattern of suspiciousPatterns) {
        if (pattern.test(field)) {
          if (error) {
            error('–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã', '–û—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');
          }
          return;
        }
      }
    }

    setIsSaving(true);
    try {
      console.log('üì§ Updating user profile...');
      
      const requestData = {
        displayName: settings.name,
        username: settings.username,
        bio: settings.bio
      };
      
      console.log('üì§ Request data:', requestData);
      
      const response = await axios.put('/user/profile', requestData);

      if (response.data.success) {
        console.log('‚úÖ Profile updated successfully');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        setOriginalSettings({
          ...originalSettings,
          name: settings.name,
          username: settings.username,
          bio: settings.bio,
          avatar: settings.avatar
        });
        
        setHasUnsavedChanges(false);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ AuthContext
        if (updateUser) {
          updateUser(response.data.user);
        }
        
        // –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã (–ø—Ä–∏ —Å–º–µ–Ω–µ username), —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö
        if (response.data.tokens) {
          console.log('üîÑ Received new tokens due to username change');
          
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π token manager
          const tokensUpdated = updateTokens(
            response.data.tokens.accessToken,
            response.data.tokens.refreshToken
          );
          
          if (tokensUpdated) {
            if (success) {
              success('–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω! –ù–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.', '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
            }
          } else {
            if (error) {
              error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤', '–û—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');
            }
          }
        } else if (success) {
          success('–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!', '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
        }
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        setTimeout(() => {
          if (onClose) {
            onClose();
          }
        }, 1000);
      } else {
        throw new Error(response.data.message || 'Update failed');
      }
    } catch (err) {
      console.error('‚ùå Error saving settings:', err);
      console.error('‚ùå Error response:', err.response?.data);
      console.error('‚ùå Error status:', err.response?.status);
      
      if (error) {
        const errorMessage = err.response?.data?.message || err.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏';
        error(errorMessage, '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
      } else {
        console.error('Toast error function not available');
      }
    } finally {
      setIsSaving(false);
    }
  };

  const handleCancel = () => {
    if (hasUnsavedChanges) {
      if (warning) {
        warning('–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å?', '–ù–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è');
      }
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
    setSettings(originalSettings);
    setHasUnsavedChanges(false);
  };

  const handleLogout = () => {
    // –õ–æ–≥–∏–∫–∞ –≤—ã—Ö–æ–¥–∞
    console.log('Logout');
    onClose();
  };

  const handleAvatarUpload = async (event) => {
    const file = event.target.files[0];
    if (!file) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];
    if (!allowedTypes.includes(file.type)) {
      if (error) {
        error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: JPEG, PNG, GIF, WebP', '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç');
      }
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 5MB)
    if (file.size > 5 * 1024 * 1024) {
      if (error) {
        error('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5MB', '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π');
      }
      return;
    }

    try {
      console.log('üì§ Uploading avatar...');

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ base64
      const base64 = await new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = () => resolve(reader.result);
        reader.onerror = reject;
        reader.readAsDataURL(file);
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π API
      const response = await axios.post('/user/upload-avatar', {
        base64Data: base64,
        fileName: `avatar_${user?._id}_${Date.now()}.png`
      });

      if (response.data.success) {
        console.log('‚úÖ Avatar uploaded successfully');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        setSettings(prev => ({
          ...prev,
          avatar: response.data.avatar
        }));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ AuthContext
        if (updateUser) {
          updateUser(response.data.user);
        }
        
        if (success) {
          success('–ê–≤–∞—Ç–∞—Ä–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!', '–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        }
      } else {
        throw new Error(response.data.message || 'Upload failed');
      }
    } catch (err) {
      console.error('‚ùå Avatar upload error:', err);
      if (error) {
        error(err.response?.data?.message || err.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–≤–∞—Ç–∞—Ä–∫–∏', '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
      }
    }
  };

  if (!isOpen) return null;

  return (
    <div className={styles.profilePage}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className={styles.pageHeader}>
        <button className={styles.backButton} onClick={onClose}>
          <FiArrowLeft size={24} />
        </button>
        <div className={styles.pageTitleContainer}>
          <h1 className={styles.pageTitle}>–ü—Ä–æ—Ñ–∏–ª—å</h1>
          {hasUnsavedChanges && (
            <div className={styles.unsavedIndicator}>
              <FiAlertCircle size={16} />
              <span>–ù–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è</span>
            </div>
          )}
        </div>
        <div className={styles.headerActions}>
          {hasUnsavedChanges && (
            <button className={styles.cancelButton} onClick={handleCancel}>
              <FiX size={20} />
            </button>
          )}
          <button 
            className={`${styles.saveButton} ${hasUnsavedChanges ? styles.saveButtonActive : ''} ${isSaving ? styles.saveButtonSaving : ''}`} 
            onClick={handleSave}
            disabled={isSaving}
          >
            {isSaving ? (
              <div className={styles.spinner}></div>
            ) : hasUnsavedChanges ? (
              <FiCheck size={20} />
            ) : (
              <FiSave size={20} />
            )}
          </button>
        </div>
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ */}
      <div className={styles.userInfoSection}>
        <div className={styles.userAvatar}>
          {settings.avatar ? (
            <img 
              src={settings.avatar} 
              alt={settings.name} 
              className={styles.avatarImage}
            />
          ) : (
            <FiUser size={32} className={styles.avatarIcon} />
          )}
        </div>
        <div className={styles.userDetails}>
          <h2 className={styles.userName}>{settings.name}</h2>
          <p className={styles.userEmail}>{settings.email}</p>
        </div>
      </div>

      {/* –°–µ–∫—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ */}
      <div className={styles.sectionsContainer}>
        {sections.map(section => {
          const IconComponent = section.icon;
          return (
            <div key={section.id} className={styles.section}>
              <button
                className={`${styles.sectionButton} ${activeSection === section.id ? styles.activeSection : ''}`}
                onClick={() => setActiveSection(activeSection === section.id ? null : section.id)}
              >
                <IconComponent size={20} />
                <span>{section.label}</span>
                <FiEdit3 size={16} className={styles.editIcon} />
              </button>

              {activeSection === section.id && (
                <div className={styles.sectionContent}>
                  {section.id === 'profile' && (
                    <div className={styles.sectionPanel}>
                      <div className={styles.settingCard}>
                        <div className={styles.settingInfo}>
                          <h3 className={styles.settingLabel}>–ê–≤–∞—Ç–∞—Ä</h3>
                          <p className={styles.settingDescription}>–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è</p>
                        </div>
                        <div className={styles.settingControl}>
                          <div className={styles.avatarUpload}>
                            <div className={styles.avatarPreview}>
                              {settings.avatar ? (
                                <img src={settings.avatar} alt="Avatar" />
                              ) : (
                                <FiUser size={24} />
                              )}
                            </div>
                            <input
                              type="file"
                              accept="image/*"
                              onChange={handleAvatarUpload}
                              style={{ display: 'none' }}
                              id="avatar-upload"
                            />
                            <label htmlFor="avatar-upload" className={styles.uploadButton}>
                              –ó–∞–≥—Ä—É–∑–∏—Ç—å
                            </label>
                          </div>
                        </div>
                      </div>

                      <div className={`${styles.settingCard} ${settings.username !== originalSettings.username ? styles.settingCardChanged : ''}`}>
                        <div className={styles.settingInfo}>
                          <h3 className={styles.settingLabel}>
                            Username
                            {settings.username !== originalSettings.username && (
                              <span className={styles.changedIndicator}>
                                <FiEdit3 size={12} />
                                –ò–∑–º–µ–Ω–µ–Ω–æ
                              </span>
                            )}
                          </h3>
                          <p className={styles.settingDescription}>–í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º</p>
                        </div>
                        <div className={styles.settingControl}>
                          <div className={styles.inputContainer}>
                            <input
                              type="text"
                              className={`${styles.textInput} ${settings.username !== originalSettings.username ? styles.textInputChanged : ''}`}
                              value={settings.username}
                              onChange={(e) => handleSettingChange('username', e.target.value)}
                              maxLength={20}
                              placeholder="username"
                            />
                            {settings.username !== originalSettings.username && (
                              <div className={styles.inputStatus}>
                                <FiCheck size={14} />
                              </div>
                            )}
                          </div>
                        </div>
                      </div>

                      <div className={`${styles.settingCard} ${settings.name !== originalSettings.name ? styles.settingCardChanged : ''}`}>
                        <div className={styles.settingInfo}>
                          <h3 className={styles.settingLabel}>
                            –ò–º—è
                            {settings.name !== originalSettings.name && (
                              <span className={styles.changedIndicator}>
                                <FiEdit3 size={12} />
                                –ò–∑–º–µ–Ω–µ–Ω–æ
                              </span>
                            )}
                          </h3>
                          <p className={styles.settingDescription}>–í–∞—à–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è</p>
                        </div>
                        <div className={styles.settingControl}>
                          <div className={styles.inputContainer}>
                            <input
                              type="text"
                              className={`${styles.textInput} ${settings.name !== originalSettings.name ? styles.textInputChanged : ''}`}
                              value={settings.name}
                              onChange={(e) => handleSettingChange('name', e.target.value)}
                              maxLength={50}
                            />
                            {settings.name !== originalSettings.name && (
                              <div className={styles.inputStatus}>
                                <FiCheck size={14} />
                              </div>
                            )}
                          </div>
                        </div>
                      </div>

                      <div className={`${styles.settingCard} ${settings.bio !== originalSettings.bio ? styles.settingCardChanged : ''}`}>
                        <div className={styles.settingInfo}>
                          <h3 className={styles.settingLabel}>
                            Bio
                            {settings.bio !== originalSettings.bio && (
                              <span className={styles.changedIndicator}>
                                <FiEdit3 size={12} />
                                –ò–∑–º–µ–Ω–µ–Ω–æ
                              </span>
                            )}
                          </h3>
                          <p className={styles.settingDescription}>–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ —Å–µ–±–µ</p>
                        </div>
                        <div className={styles.settingControl}>
                          <div className={styles.inputContainer}>
                            <textarea
                              className={`${styles.textInput} ${settings.bio !== originalSettings.bio ? styles.textInputChanged : ''}`}
                              value={settings.bio}
                              onChange={(e) => handleSettingChange('bio', e.target.value)}
                              maxLength={160}
                              rows={3}
                              placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ..."
                            />
                            {settings.bio !== originalSettings.bio && (
                              <div className={styles.inputStatus}>
                                <FiCheck size={14} />
                              </div>
                            )}
                          </div>
                        </div>
                      </div>

                      <div className={styles.settingCard}>
                        <div className={styles.settingInfo}>
                          <h3 className={styles.settingLabel}>Email</h3>
                          <p className={styles.settingDescription}>–í–∞—à email –∞–¥—Ä–µ—Å</p>
                        </div>
                        <div className={styles.settingControl}>
                          <input
                            type="email"
                            className={styles.textInput}
                            value={settings.email}
                            onChange={(e) => handleSettingChange('email', e.target.value)}
                          />
                        </div>
                      </div>
                    </div>
                  )}

                  {section.id === 'appearance' && (
                    <div className={styles.sectionPanel}>
                      <div className={styles.settingCard}>
                        <div className={styles.settingInfo}>
                          <h3 className={styles.settingLabel}>–¢–µ–º–∞</h3>
                          <p className={styles.settingDescription}>–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É</p>
                        </div>
                        <div className={styles.settingControl}>
                          <ThemeToggle variant="buttons" />
                        </div>
                      </div>

                      <div className={styles.settingCard}>
                        <div className={styles.settingInfo}>
                          <h3 className={styles.settingLabel}>–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞</h3>
                          <p className={styles.settingDescription}>–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —á—Ç–µ–Ω–∏—è</p>
                        </div>
                        <div className={styles.settingControl}>
                          <select
                            className={styles.select}
                            value={settings.fontSize}
                            onChange={(e) => handleSettingChange('fontSize', e.target.value)}
                          >
                            <option value="small">–ú–∞–ª–µ–Ω—å–∫–∏–π</option>
                            <option value="medium">–°—Ä–µ–¥–Ω–∏–π</option>
                            <option value="large">–ë–æ–ª—å—à–æ–π</option>
                            <option value="extra-large">–û—á–µ–Ω—å –±–æ–ª—å—à–æ–π</option>
                          </select>
                        </div>
                      </div>

                      <div className={styles.settingCard}>
                        <div className={styles.settingInfo}>
                          <h3 className={styles.settingLabel}>–ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤</h3>
                          <p className={styles.settingDescription}>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞—Ö –º–µ–∂–¥—É —á–∞—Ç–∞–º–∏</p>
                        </div>
                        <div className={styles.settingControl}>
                          <div className={styles.animationButtons}>
                            <button
                              className={`${styles.animationButton} ${settings.animationType === 'slideFromRight' ? styles.active : ''}`}
                              onClick={() => handleSettingChange('animationType', 'slideFromRight')}
                              title="–°–¥–≤–∏–≥ —Å–ø—Ä–∞–≤–∞"
                            >
                              ‚Üí
                            </button>
                            <button
                              className={`${styles.animationButton} ${settings.animationType === 'scaleIn' ? styles.active : ''}`}
                              onClick={() => handleSettingChange('animationType', 'scaleIn')}
                              title="–ú—è–≥–∫–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ"
                            >
                              ‚ö°
                            </button>
                            <button
                              className={`${styles.animationButton} ${settings.animationType === 'fadeIn' ? styles.active : ''}`}
                              onClick={() => handleSettingChange('animationType', 'fadeIn')}
                              title="Fade-—ç—Ñ—Ñ–µ–∫—Ç"
                            >
                              ‚ú®
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>
                  )}

                  {section.id === 'notifications' && (
                    <div className={styles.sectionPanel}>
                      <div className={styles.settingCard}>
                        <div className={styles.settingInfo}>
                          <h3 className={styles.settingLabel}>Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h3>
                          <p className={styles.settingDescription}>–ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö</p>
                        </div>
                        <div className={styles.settingControl}>
                          <button
                            className={`${styles.toggleSwitch} ${settings.notificationsEnabled ? styles.active : ''}`}
                            onClick={() => handleSettingChange('notificationsEnabled', !settings.notificationsEnabled)}
                          >
                            <div className={styles.toggleSlider}></div>
                          </button>
                        </div>
                      </div>

                      <div className={styles.settingCard}>
                        <div className={styles.settingInfo}>
                          <h3 className={styles.settingLabel}>–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –æ–Ω–ª–∞–π–Ω</h3>
                          <p className={styles.settingDescription}>–î—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤–∏–¥—è—Ç –≤–∞—à —Å—Ç–∞—Ç—É—Å</p>
                        </div>
                        <div className={styles.settingControl}>
                          <button
                            className={`${styles.toggleSwitch} ${settings.showOnlineStatus ? styles.active : ''}`}
                            onClick={() => handleSettingChange('showOnlineStatus', !settings.showOnlineStatus)}
                          >
                            <div className={styles.toggleSlider}></div>
                          </button>
                        </div>
                      </div>

                      <div className={styles.settingCard}>
                        <div className={styles.settingInfo}>
                          <h3 className={styles.settingLabel}>–ü—Ä–µ–≤—å—é —Å–æ–æ–±—â–µ–Ω–∏–π</h3>
                          <p className={styles.settingDescription}>–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö</p>
                        </div>
                        <div className={styles.settingControl}>
                          <button
                            className={`${styles.toggleSwitch} ${settings.messagePreview ? styles.active : ''}`}
                            onClick={() => handleSettingChange('messagePreview', !settings.messagePreview)}
                          >
                            <div className={styles.toggleSlider}></div>
                          </button>
                        </div>
                      </div>
                    </div>
                  )}

                  {section.id === 'sound' && (
                    <div className={styles.sectionPanel}>
                      <div className={styles.settingCard}>
                        <div className={styles.settingInfo}>
                          <h3 className={styles.settingLabel}>–ó–≤—É–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</h3>
                          <p className={styles.settingDescription}>–í–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π</p>
                        </div>
                        <div className={styles.settingControl}>
                          <button
                            className={`${styles.toggleSwitch} ${settings.soundEnabled ? styles.active : ''}`}
                            onClick={() => handleSettingChange('soundEnabled', !settings.soundEnabled)}
                          >
                            <div className={styles.toggleSlider}></div>
                          </button>
                        </div>
                      </div>

                      <div className={styles.settingCard}>
                        <div className={styles.settingInfo}>
                          <h3 className={styles.settingLabel}>–í–∏–±—Ä–∞—Ü–∏—è</h3>
                          <p className={styles.settingDescription}>–í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π</p>
                        </div>
                        <div className={styles.settingControl}>
                          <button
                            className={`${styles.toggleSwitch} ${settings.vibrationEnabled ? styles.active : ''}`}
                            onClick={() => handleSettingChange('vibrationEnabled', !settings.vibrationEnabled)}
                          >
                            <div className={styles.toggleSlider}></div>
                          </button>
                        </div>
                      </div>
                    </div>
                  )}

                  {section.id === 'additional' && (
                    <div className={styles.sectionPanel}>
                      <div className={styles.settingCard}>
                        <div className={styles.settingInfo}>
                          <h3 className={styles.settingLabel}>–Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞</h3>
                          <p className={styles.settingDescription}>–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</p>
                        </div>
                        <div className={styles.settingControl}>
                          <select
                            className={styles.select}
                            value={settings.language}
                            onChange={(e) => handleSettingChange('language', e.target.value)}
                          >
                            <option value="ru">–†—É—Å—Å–∫–∏–π</option>
                            <option value="en">English</option>
                            <option value="es">Espa√±ol</option>
                            <option value="fr">Fran√ßais</option>
                            <option value="de">Deutsch</option>
                          </select>
                        </div>
                      </div>

                      <div className={styles.settingCard}>
                        <div className={styles.settingInfo}>
                          <h3 className={styles.settingLabel}>–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ</h3>
                          <p className={styles.settingDescription}>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π</p>
                        </div>
                        <div className={styles.settingControl}>
                          <button
                            className={`${styles.toggleSwitch} ${settings.autoSave ? styles.active : ''}`}
                            onClick={() => handleSettingChange('autoSave', !settings.autoSave)}
                          >
                            <div className={styles.toggleSlider}></div>
                          </button>
                        </div>
                      </div>

                      <div className={styles.settingCard}>
                        <div className={styles.settingInfo}>
                          <h3 className={styles.settingLabel}>–ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏–∞</h3>
                          <p className={styles.settingDescription}>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –≤–∏–¥–µ–æ</p>
                        </div>
                        <div className={styles.settingControl}>
                          <button
                            className={`${styles.toggleSwitch} ${settings.autoDownload ? styles.active : ''}`}
                            onClick={() => handleSettingChange('autoDownload', !settings.autoDownload)}
                          >
                            <div className={styles.toggleSlider}></div>
                          </button>
                        </div>
                      </div>

                      <div className={styles.infoCard}>
                        <div className={styles.appInfo}>
                          <h3 className={styles.appName}>Tuktuk Messenger</h3>
                          <p className={styles.appVersion}>–í–µ—Ä—Å–∏—è 1.0.0</p>
                          <p className={styles.appDescription}>
                            –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã, 
                            —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏.
                          </p>
                        </div>
                      </div>
                    </div>
                  )}

                  {section.id === 'security' && (
                    <div className={styles.sectionPanel}>
                      <div className={styles.settingCard}>
                        <div className={styles.settingInfo}>
                          <h3 className={styles.settingLabel}>–î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è</h3>
                          <p className={styles.settingDescription}>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –∞–∫–∫–∞—É–Ω—Ç–∞</p>
                        </div>
                        <div className={styles.settingControl}>
                          <button
                            className={`${styles.toggleSwitch} ${settings.twoFactorEnabled ? styles.active : ''}`}
                            onClick={() => handleSettingChange('twoFactorEnabled', !settings.twoFactorEnabled)}
                          >
                            <div className={styles.toggleSlider}></div>
                          </button>
                        </div>
                      </div>

                      <div className={styles.settingCard}>
                        <div className={styles.settingInfo}>
                          <h3 className={styles.settingLabel}>–í—Ä–µ–º—è —Å–µ—Å—Å–∏–∏</h3>
                          <p className={styles.settingDescription}>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã—Ö–æ–¥ —á–µ—Ä–µ–∑</p>
                        </div>
                        <div className={styles.settingControl}>
                          <select
                            className={styles.select}
                            value={settings.sessionTimeout}
                            onChange={(e) => handleSettingChange('sessionTimeout', parseInt(e.target.value))}
                          >
                            <option value={15}>15 –º–∏–Ω—É—Ç</option>
                            <option value={30}>30 –º–∏–Ω—É—Ç</option>
                            <option value={60}>1 —á–∞—Å</option>
                            <option value={0}>–ù–∏–∫–æ–≥–¥–∞</option>
                          </select>
                        </div>
                      </div>

                      <div className={styles.settingCard}>
                        <div className={styles.settingInfo}>
                          <h3 className={styles.settingLabel}>–°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å</h3>
                          <p className={styles.settingDescription}>–û–±–Ω–æ–≤–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</p>
                        </div>
                        <div className={styles.settingControl}>
                          <button className={styles.actionButton}>
                            –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å
                          </button>
                        </div>
                      </div>

                      <div className={styles.settingCard}>
                        <div className={styles.settingInfo}>
                          <h3 className={styles.settingLabel}>–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ</h3>
                          <p className={styles.settingDescription}>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π</p>
                        </div>
                        <div className={styles.settingControl}>
                          <button
                            className={`${styles.toggleSwitch} ${settings.autoSave ? styles.active : ''}`}
                            onClick={() => handleSettingChange('autoSave', !settings.autoSave)}
                          >
                            <div className={styles.toggleSlider}></div>
                          </button>
                        </div>
                      </div>

                      <div className={styles.settingCard}>
                        <div className={styles.settingInfo}>
                          <h3 className={styles.settingLabel}>–ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏–∞</h3>
                          <p className={styles.settingDescription}>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –≤–∏–¥–µ–æ</p>
                        </div>
                        <div className={styles.settingControl}>
                          <button
                            className={`${styles.toggleSwitch} ${settings.autoDownload ? styles.active : ''}`}
                            onClick={() => handleSettingChange('autoDownload', !settings.autoDownload)}
                          >
                            <div className={styles.toggleSlider}></div>
                          </button>
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              )}
            </div>
          );
        })}

        {/* –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ */}
        <div className={styles.logoutSection}>
          <button className={styles.logoutButton} onClick={handleLogout}>
            <FiLogOut size={20} />
            <span>–í—ã–π—Ç–∏</span>
          </button>
        </div>
      </div>
    </div>
  );
};

export default MobileProfilePage;
