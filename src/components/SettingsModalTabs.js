import React, { useState, useEffect } from 'react';
import { FiX, FiUser, FiEye, FiBell, FiShield, FiSave } from 'react-icons/fi';
import ThemeToggle from './ThemeToggle/ThemeToggle';
import axios from '../services/axiosConfig';
import { useToast } from '../contexts/ToastContext';
import { useAuth } from '../contexts/AuthContext';
import styles from './SettingsModalTabs.module.css';

const SettingsModalTabs = ({ isOpen, onClose, user }) => {
  const [activeTab, setActiveTab] = useState('profile');
  const [settings, setSettings] = useState({
    // –ü—Ä–æ—Ñ–∏–ª—å
    name: user?.displayName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
    username: user?.username || '',
    email: user?.email || 'user@example.com',
    bio: user?.bio || '',
    avatar: user?.avatar || null,
    
    // –í–Ω–µ—à–Ω–∏–π –≤–∏–¥
    theme: 'dark',
    fontSize: 'medium',
    animationType: 'slideFromRight',
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    soundEnabled: true,
    notificationsEnabled: true,
    showOnlineStatus: true,
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    twoFactorEnabled: false,
    sessionTimeout: 30
  });

  const { success, error, warning } = useToast();
  const { updateUser } = useAuth();

  const tabs = [
    { id: 'profile', label: '–ü—Ä–æ—Ñ–∏–ª—å', icon: FiUser },
    { id: 'appearance', label: '–í–Ω–µ—à–Ω–∏–π –≤–∏–¥', icon: FiEye },
    { id: 'notifications', label: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', icon: FiBell },
    { id: 'security', label: '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', icon: FiShield }
  ];

  const handleSettingChange = (key, value) => {
    setSettings(prev => ({
      ...prev,
      [key]: value
    }));
  };

  // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ user
  useEffect(() => {
    if (user) {
      setSettings(prev => ({
        ...prev,
        name: user.displayName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        username: user.username || '',
        email: user.email || 'user@example.com',
        bio: user.bio || '',
        avatar: user.avatar || null
      }));
    }
  }, [user]);

  const handleThemeChange = (theme) => {
    handleSettingChange('theme', theme);
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
    document.documentElement.setAttribute('data-theme', theme);
    localStorage.setItem('tuktuk-theme', theme);
  };

  const handleSave = async () => {
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API
      const hasChanges = settings.name !== user?.displayName || 
                        settings.username !== user?.username ||
                        settings.bio !== user?.bio;

      if (hasChanges) {
        console.log('üì§ Updating user profile...');
        
        const response = await axios.put('/user/profile', {
          displayName: settings.name,
          username: settings.username,
          bio: settings.bio
        });

        if (response.data.success) {
          console.log('‚úÖ Profile updated successfully');
          success('–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!', '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ AuthContext
          if (updateUser) {
            updateUser(response.data.user);
          }
          
          // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É
          if (onClose) {
            onClose();
          }
        } else {
          throw new Error(response.data.message || 'Update failed');
        }
      } else {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        localStorage.setItem('userSettings', JSON.stringify(settings));
        console.log('Settings saved:', settings);
        success('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!', '–ì–æ—Ç–æ–≤–æ');
        onClose();
      }
    } catch (error) {
      console.error('‚ùå Error saving settings:', error);
      error(error.response?.data?.message || error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏', '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
    }
  };

  const handleAvatarUpload = async (event) => {
    const file = event.target.files[0];
    if (!file) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];
    if (!allowedTypes.includes(file.type)) {
      error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: JPEG, PNG, GIF, WebP', '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 5MB)
    if (file.size > 5 * 1024 * 1024) {
      error('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5MB', '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π');
      return;
    }

    try {
      console.log('üì§ Uploading avatar...');

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ base64
      const base64 = await new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = () => resolve(reader.result);
        reader.onerror = reject;
        reader.readAsDataURL(file);
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π API
      const response = await axios.post('/user/upload-avatar', {
        base64Data: base64,
        fileName: `avatar_${user?._id}_${Date.now()}.png`
      });

      if (response.data.success) {
        console.log('‚úÖ Avatar uploaded successfully');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        setSettings(prev => ({
          ...prev,
          avatar: response.data.avatar
        }));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ AuthContext
        if (updateUser) {
          updateUser(response.data.user);
        }
        
        success('–ê–≤–∞—Ç–∞—Ä–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!', '–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      } else {
        throw new Error(response.data.message || 'Upload failed');
      }
    } catch (error) {
      console.error('‚ùå Avatar upload error:', error);
      error(error.response?.data?.message || error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–≤–∞—Ç–∞—Ä–∫–∏', '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
    }
  };

  const handleCancel = () => {
    onClose();
  };

  if (!isOpen) return null;

  return (
    <div className={styles.modalOverlay} onClick={onClose}>
      <div className={styles.modalContent} onClick={(e) => e.stopPropagation()}>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className={styles.modalHeader}>
          <h2 className={styles.modalTitle}>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</h2>
          <button className={styles.closeButton} onClick={onClose}>
            <FiX size={20} />
          </button>
        </div>

        {/* –¢–∞–±—ã */}
        <div className={styles.tabsContainer}>
          {tabs.map(tab => {
            const IconComponent = tab.icon;
            return (
              <button
                key={tab.id}
                className={`${styles.tab} ${activeTab === tab.id ? styles.activeTab : ''}`}
                onClick={() => setActiveTab(tab.id)}
              >
                <IconComponent size={16} />
                <span>{tab.label}</span>
              </button>
            );
          })}
        </div>

        {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–æ–≤ */}
        <div className={styles.tabContent}>
          {activeTab === 'profile' && (
            <div className={styles.tabPanel}>
              <h3 className={styles.panelTitle}>–ü—Ä–æ—Ñ–∏–ª—å</h3>
              
              <div className={styles.settingItem}>
                <div className={styles.settingInfo}>
                  <label className={styles.settingLabel}>–ê–≤–∞—Ç–∞—Ä</label>
                  <span className={styles.settingDescription}>–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è</span>
                </div>
                <div className={styles.settingControl}>
                  <div className={styles.avatarUpload}>
                    <div className={styles.avatarPreview}>
                      {settings.avatar ? (
                        <img src={settings.avatar} alt="Avatar" className={styles.avatarImage} />
                      ) : (
                        <div className={styles.avatarPlaceholder}>
                          {settings.name?.charAt(0)?.toUpperCase() || 'U'}
                        </div>
                      )}
                    </div>
                    <button className={styles.uploadButton}>
                      <input
                        type="file"
                        accept="image/*"
                        onChange={handleAvatarUpload}
                        style={{ display: 'none' }}
                        id="desktop-avatar-upload"
                      />
                      <label htmlFor="desktop-avatar-upload" style={{ cursor: 'pointer', display: 'block' }}>
                        –ó–∞–≥—Ä—É–∑–∏—Ç—å
                      </label>
                    </button>
                  </div>
                </div>
              </div>

              <div className={styles.settingItem}>
                <div className={styles.settingInfo}>
                  <label className={styles.settingLabel}>Username</label>
                  <span className={styles.settingDescription}>–í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º</span>
                </div>
                <div className={styles.settingControl}>
                  <input
                    type="text"
                    className={styles.textInput}
                    value={settings.username}
                    onChange={(e) => handleSettingChange('username', e.target.value)}
                    maxLength={20}
                    placeholder="username"
                  />
                </div>
              </div>

              <div className={styles.settingItem}>
                <div className={styles.settingInfo}>
                  <label className={styles.settingLabel}>–ò–º—è</label>
                  <span className={styles.settingDescription}>–í–∞—à–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è</span>
                </div>
                <div className={styles.settingControl}>
                  <input
                    type="text"
                    className={styles.textInput}
                    value={settings.name}
                    onChange={(e) => handleSettingChange('name', e.target.value)}
                    maxLength={50}
                  />
                </div>
              </div>

              <div className={styles.settingItem}>
                <div className={styles.settingInfo}>
                  <label className={styles.settingLabel}>Bio</label>
                  <span className={styles.settingDescription}>–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ —Å–µ–±–µ</span>
                </div>
                <div className={styles.settingControl}>
                  <textarea
                    className={styles.textInput}
                    value={settings.bio}
                    onChange={(e) => handleSettingChange('bio', e.target.value)}
                    maxLength={160}
                    rows={3}
                    placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ..."
                  />
                </div>
              </div>

              <div className={styles.settingItem}>
                <div className={styles.settingInfo}>
                  <label className={styles.settingLabel}>Email</label>
                  <span className={styles.settingDescription}>–í–∞—à email –∞–¥—Ä–µ—Å</span>
                </div>
                <div className={styles.settingControl}>
                  <input
                    type="email"
                    className={styles.textInput}
                    value={settings.email}
                    onChange={(e) => handleSettingChange('email', e.target.value)}
                  />
                </div>
              </div>
            </div>
          )}

          {activeTab === 'appearance' && (
            <div className={styles.tabPanel}>
              <h3 className={styles.panelTitle}>–í–Ω–µ—à–Ω–∏–π –≤–∏–¥</h3>
              
              <div className={styles.settingItem}>
                <div className={styles.settingInfo}>
                  <label className={styles.settingLabel}>–¢–µ–º–∞</label>
                  <span className={styles.settingDescription}>–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É</span>
                </div>
                <div className={styles.settingControl}>
                  <ThemeToggle variant="buttons" />
                </div>
              </div>

              <div className={styles.settingItem}>
                <div className={styles.settingInfo}>
                  <label className={styles.settingLabel}>–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞</label>
                  <span className={styles.settingDescription}>–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞</span>
                </div>
                <div className={styles.settingControl}>
                  <select
                    className={styles.select}
                    value={settings.fontSize}
                    onChange={(e) => handleSettingChange('fontSize', e.target.value)}
                  >
                    <option value="small">–ú–∞–ª–µ–Ω—å–∫–∏–π</option>
                    <option value="medium">–°—Ä–µ–¥–Ω–∏–π</option>
                    <option value="large">–ë–æ–ª—å—à–æ–π</option>
                  </select>
                </div>
              </div>

              <div className={styles.settingItem}>
                <div className={styles.settingInfo}>
                  <label className={styles.settingLabel}>–ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤</label>
                  <span className={styles.settingDescription}>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∏–º–∞—Ü–∏–∏</span>
                </div>
                <div className={styles.settingControl}>
                  <div className={styles.animationButtons}>
                    <button
                      className={`${styles.animationButton} ${settings.animationType === 'slideFromRight' ? styles.active : ''}`}
                      onClick={() => handleSettingChange('animationType', 'slideFromRight')}
                      title="–°–¥–≤–∏–≥ —Å–ø—Ä–∞–≤–∞"
                    >
                      ‚Üí
                    </button>
                    <button
                      className={`${styles.animationButton} ${settings.animationType === 'scaleIn' ? styles.active : ''}`}
                      onClick={() => handleSettingChange('animationType', 'scaleIn')}
                      title="–ú—è–≥–∫–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ"
                    >
                      ‚ö°
                    </button>
                    <button
                      className={`${styles.animationButton} ${settings.animationType === 'fadeIn' ? styles.active : ''}`}
                      onClick={() => handleSettingChange('animationType', 'fadeIn')}
                      title="Fade-—ç—Ñ—Ñ–µ–∫—Ç"
                    >
                      ‚ú®
                    </button>
                  </div>
                </div>
              </div>
            </div>
          )}

          {activeTab === 'notifications' && (
            <div className={styles.tabPanel}>
              <h3 className={styles.panelTitle}>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h3>
              
              <div className={styles.settingItem}>
                <div className={styles.settingInfo}>
                  <label className={styles.settingLabel}>–ó–≤—É–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</label>
                  <span className={styles.settingDescription}>–í–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π</span>
                </div>
                <div className={styles.settingControl}>
                  <button
                    className={`${styles.toggleButton} ${settings.soundEnabled ? styles.active : ''}`}
                    onClick={() => handleSettingChange('soundEnabled', !settings.soundEnabled)}
                  >
                    {settings.soundEnabled ? '‚úì' : '‚úó'}
                  </button>
                </div>
              </div>

              <div className={styles.settingItem}>
                <div className={styles.settingInfo}>
                  <label className={styles.settingLabel}>Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</label>
                  <span className={styles.settingDescription}>–ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö</span>
                </div>
                <div className={styles.settingControl}>
                  <button
                    className={`${styles.toggleButton} ${settings.notificationsEnabled ? styles.active : ''}`}
                    onClick={() => handleSettingChange('notificationsEnabled', !settings.notificationsEnabled)}
                  >
                    {settings.notificationsEnabled ? '‚úì' : '‚úó'}
                  </button>
                </div>
              </div>

              <div className={styles.settingItem}>
                <div className={styles.settingInfo}>
                  <label className={styles.settingLabel}>–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –æ–Ω–ª–∞–π–Ω</label>
                  <span className={styles.settingDescription}>–î—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤–∏–¥—è—Ç –≤–∞—à —Å—Ç–∞—Ç—É—Å</span>
                </div>
                <div className={styles.settingControl}>
                  <button
                    className={`${styles.toggleButton} ${settings.showOnlineStatus ? styles.active : ''}`}
                    onClick={() => handleSettingChange('showOnlineStatus', !settings.showOnlineStatus)}
                  >
                    {settings.showOnlineStatus ? '‚úì' : '‚úó'}
                  </button>
                </div>
              </div>
            </div>
          )}

          {activeTab === 'security' && (
            <div className={styles.tabPanel}>
              <h3 className={styles.panelTitle}>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</h3>
              
              <div className={styles.settingItem}>
                <div className={styles.settingInfo}>
                  <label className={styles.settingLabel}>–î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è</label>
                  <span className={styles.settingDescription}>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –∞–∫–∫–∞—É–Ω—Ç–∞</span>
                </div>
                <div className={styles.settingControl}>
                  <button
                    className={`${styles.toggleButton} ${settings.twoFactorEnabled ? styles.active : ''}`}
                    onClick={() => handleSettingChange('twoFactorEnabled', !settings.twoFactorEnabled)}
                  >
                    {settings.twoFactorEnabled ? '‚úì' : '‚úó'}
                  </button>
                </div>
              </div>

              <div className={styles.settingItem}>
                <div className={styles.settingInfo}>
                  <label className={styles.settingLabel}>–í—Ä–µ–º—è —Å–µ—Å—Å–∏–∏</label>
                  <span className={styles.settingDescription}>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã—Ö–æ–¥ —á–µ—Ä–µ–∑</span>
                </div>
                <div className={styles.settingControl}>
                  <select
                    className={styles.select}
                    value={settings.sessionTimeout}
                    onChange={(e) => handleSettingChange('sessionTimeout', parseInt(e.target.value))}
                  >
                    <option value={15}>15 –º–∏–Ω—É—Ç</option>
                    <option value={30}>30 –º–∏–Ω—É—Ç</option>
                    <option value={60}>1 —á–∞—Å</option>
                    <option value={0}>–ù–∏–∫–æ–≥–¥–∞</option>
                  </select>
                </div>
              </div>

              <div className={styles.settingItem}>
                <div className={styles.settingInfo}>
                  <label className={styles.settingLabel}>–°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å</label>
                  <span className={styles.settingDescription}>–û–±–Ω–æ–≤–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</span>
                </div>
                <div className={styles.settingControl}>
                  <button className={styles.actionButton}>
                    –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å
                  </button>
                </div>
              </div>
            </div>
          )}
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
        <div className={styles.modalFooter}>
          <button className={styles.cancelButton} onClick={handleCancel}>
            –û—Ç–º–µ–Ω–∞
          </button>
          <button className={styles.saveButton} onClick={handleSave}>
            <FiSave size={16} />
            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
          </button>
        </div>
      </div>
    </div>
  );
};

export default SettingsModalTabs;
