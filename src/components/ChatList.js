import React, { useState, useEffect, useRef } from 'react';
import axios from 'axios';
import { FiUsers, FiCircle, FiZap } from 'react-icons/fi';
import { formatLastSeen, formatChatTime } from '../utils/timeUtils';
import { useAuth } from '../contexts/AuthContext';
import { useSocket } from '../contexts/SocketContext';
import SwipeableChatItem from './SwipeableChatItem';
import ChatContextMenu from './ChatContextMenu';
import OnlineStatusIndicator from './OnlineStatusIndicator';
import useIsMobile from '../hooks/useIsMobile';
import UserProfileModal from './UserProfileModal';
import { useToast } from '../contexts/ToastContext';
import ConfirmModal from './ConfirmModal';
import styles from './ChatList.module.css';
import { getUserAvatarUrl } from '../utils/avatarUrl';

const ChatList = ({ chats, selectedChat, onChatSelect, isLoading, showAIChat, onAIChatSelect, onOpenArchive }) => {
  const { user } = useAuth();
  const { isUserOnline, getUserStatus, refreshAllUsersStatus } = useSocket();
  const isMobile = useIsMobile();
  const toast = useToast();
  const { success, error } = toast || {};
  // –õ–æ–∫–∞–ª—å–Ω–∞—è –∫–æ–ø–∏—è —Å–ø–∏—Å–∫–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
  const [list, setList] = useState(chats || []);
  const [isProfileOpen, setIsProfileOpen] = useState(false);
  const [profileUser, setProfileUser] = useState(null);
  const listRef = useRef(null);
  const touchStartYRef = useRef(null);
  const pullMaxRef = useRef(0);
  const blockClicksUntilRef = useRef(0);
  const [showArchiveTeaser, setShowArchiveTeaser] = useState(false);
  const [topPullDy, setTopPullDy] = useState(0);
  // Pull-up-to-archive per-item state (mobile)
  const itemTouchStartRef = useRef({ id: null, y: 0 });
  const [pullUpState, setPullUpState] = useState({ id: null, dy: 0 });
  const [confirm, setConfirm] = useState({ open: false, title: '', message: '', onConfirm: null });
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
  const [contextMenu, setContextMenu] = useState({
    isOpen: false,
    position: { x: 0, y: 0 },
    chat: null
  });

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å –ø—Ä–æ–ø—Å–∞–º–∏
  useEffect(() => {
    setList(chats || []);
  }, [chats]);

  // (removed) server unread-counts usage per request

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–∞—Ç–æ–≤ (—Å –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥–æ–º)
  useEffect(() => {
    if (list && list.length > 0) {
      console.log('üîÑ ChatList: Refreshing user statuses for', chats.length, 'chats');
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º setTimeout –¥–ª—è –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥–∞
      const timeoutId = setTimeout(() => {
        refreshAllUsersStatus(list);
      }, 1000); // 1 —Å–µ–∫—É–Ω–¥–∞ –∑–∞–¥–µ—Ä–∂–∫–∏
      
      return () => clearTimeout(timeoutId);
    }
  }, [list, refreshAllUsersStatus]);

  // (—É–¥–∞–ª–µ–Ω–æ) –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è clearedUntil

  // –ù–µ —Å–∫—Ä—ã–≤–∞–µ–º —Ç–∏–∑–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ scroll, —á—Ç–æ–±—ã –æ–Ω –Ω–µ –ø—Ä–æ–ø–∞–¥–∞–ª –ø–æ—Å–ª–µ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –ø–∞–ª—å—Ü–∞
  
  if (isLoading) {
    return (
      <div className={styles.loadingContainer}>
        <div className={styles.loadingSpinner}></div>
        <p className={styles.loadingText}>–ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–æ–≤...</p>
      </div>
    );
  }

  if (list.length === 0) {
    return (
      <div className={styles.emptyState}>
        <div className={styles.emptyIcon}>üí¨</div>
        <p className={styles.emptyText}>–ß–∞—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</p>
        <p className={styles.emptySubtext}>–ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –±–µ—Å–µ–¥—É!</p>
      </div>
    );
  }

  const formatTime = (date) => {
    return formatChatTime(date);
  };

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
  const requestDeleteChat = (chat) => {
    setConfirm({
      open: true,
      title: '–£–¥–∞–ª–∏—Ç—å —á–∞—Ç',
      message: '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å/–ø–æ–∫–∏–Ω—É—Ç—å —ç—Ç–æ—Ç —á–∞—Ç? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.',
      onConfirm: () => handleDeleteChat(chat),
    });
  };

  const requestArchiveChat = (chat) => {
    setConfirm({
      open: true,
      title: '–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç',
      message: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–∞—Ç –≤ –∞—Ä—Ö–∏–≤? –û–Ω –∏—Å—á–µ–∑–Ω–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞. –í—ã —Å–º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å –µ–≥–æ –∏–∑ –∞—Ä—Ö–∏–≤–∞ –ø–æ–∑–∂–µ.',
      onConfirm: () => handleArchiveChat(chat),
    });
  };

  const getChatName = (chat) => {
    if (chat.type === 'group') {
      return chat.name || '–ì—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç';
    } else {
      // For private chats, show the other participant's name
      const otherParticipant = chat.participants?.find(p => p && p._id !== user._id);
      return otherParticipant?.displayName || otherParticipant?.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    }
  };

  const getChatAvatar = (chat) => {
    if (chat.type === 'group') {
      return chat.avatar;
    } else {
      // For private chats, show the other participant's avatar
      const otherParticipant = chat.participants?.find(p => p && p._id !== user._id);
      return otherParticipant ? getUserAvatarUrl(otherParticipant) : undefined;
    }
  };

  const getLastMessagePreview = (chat) => {
    if (!chat.lastMessage) {
      return '–°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç';
    }

    const message = chat.lastMessage;
    if (message.type === 'text') {
      return message.content.length > 50 
        ? message.content.substring(0, 50) + '...'
        : message.content;
    } else if (message.type === 'image' && message.imageUrl) {
      return (
        <span className={styles.lastMessageMedia}>
          <img src={message.imageUrl} alt="thumb" className={styles.lastMessageThumb} />
          <span>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</span>
        </span>
      );
    } else {
      return `üìé ${message.type}`;
    }
  };

  // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª—é—á—ë–Ω —Ü–µ–ª–∏–∫–æ–º

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å —á–∞—Ç–∞–º–∏
  const handleDeleteChat = async (chat) => {
    // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ —É–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    setList(prev => prev.filter(c => c._id !== chat._id));
    if (selectedChat?._id === chat._id) {
      onChatSelect(null);
    }
    try {
      await axios.delete(`/chat/${chat._id}`);
      success && success('–ß–∞—Ç —É–¥–∞–ª—ë–Ω', '–î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');
    } catch (e) {
      console.error('Failed to delete chat:', e);
      error && error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —á–∞—Ç', '–û—à–∏–±–∫–∞');
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
      setList(prev => {
        const exists = prev.some(c => c._id === chat._id);
        return exists ? prev : [chat, ...prev];
      });
    }
  };

  const handleArchiveChat = async (chat) => {
    // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ —É–±–∏—Ä–∞–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ (–∞—Ä—Ö–∏–≤ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–ø–∏—Å–∫–µ)
    setList(prev => prev.filter(c => c._id !== chat._id));
    if (selectedChat?._id === chat._id) {
      onChatSelect(null);
    }
    try {
      await axios.put(`/chat/${chat._id}/archive`, { archived: true });
      success && success('–ß–∞—Ç –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω', '–ü–µ—Ä–µ–º–µ—â—ë–Ω –≤ –∞—Ä—Ö–∏–≤');
    } catch (e) {
      console.error('Failed to archive chat:', e);
      error && error('–ù–µ —É–¥–∞–ª–æ—Å—å –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç', '–û—à–∏–±–∫–∞');
      // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–º –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      setList(prev => {
        const exists = prev.some(c => c._id === chat._id);
        return exists ? prev : [chat, ...prev];
      });
    }
  };

  const handleMuteChat = async (chat) => {
    try {
      await axios.put(`/chat/${chat._id}/mute`, { muted: true });
      success && success('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã', '–ß–∞—Ç –∑–∞–≥–ª—É—à—ë–Ω');
    } catch (e) {
      console.error('Failed to mute chat:', e);
      error && error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', '–û—à–∏–±–∫–∞');
    }
  };

  const handleViewProfile = (chat) => {
    if (!chat) return;
    if (chat.type === 'group') {
      // –î–ª—è –≥—Ä—É–ø–ø –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
      setProfileUser(chat.participants?.[0] || null);
    } else {
      const other = chat.participants?.find(p => p && p._id !== user._id) || null;
      setProfileUser(other);
    }
    setIsProfileOpen(true);
  };

  const handleChatSettings = (chat) => {
    console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞:', chat);
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–∞
    // onChatSettings?.(chat);
  };

  const handleContextMenu = (e, chat) => {
    e.preventDefault();
    setContextMenu({
      isOpen: true,
      position: { x: e.clientX, y: e.clientY },
      chat: chat
    });
  };

  const closeContextMenu = () => {
    setContextMenu({
      isOpen: false,
      position: { x: 0, y: 0 },
      chat: null
    });
  };

  const getOnlineStatus = (chat) => {
    if (chat.type === 'group') {
      const onlineCount = chat.participants?.filter(p => {
        if (!p) return false;
        const userStatus = getUserStatus(p._id);
        return userStatus.isOnline;
      }).length || 0;
      return onlineCount > 0 ? (
        <span style={{ color: '#10B981', fontSize: '12px' }}>
          {onlineCount} –æ–Ω–ª–∞–π–Ω
        </span>
      ) : null;
    } else {
      const otherParticipant = chat.participants?.find(p => p && p._id !== user._id);
      const userStatus = getUserStatus(otherParticipant?._id);
      
      return (
        <OnlineStatusIndicator
          userId={otherParticipant?._id}
          isOnline={userStatus.isOnline}
          lastSeen={userStatus.lastSeen}
          showText={true}
          size="small"
        />
      );
    }
  };

  return (
    <div
      className={styles.chatList}
      ref={listRef}
      onTouchStart={(e) => {
        if (!isMobile) return;
        const el = listRef.current;
        if (!el) return;
        if (el.scrollTop <= 0 && e.touches && e.touches.length === 1) {
          touchStartYRef.current = e.touches[0].clientY;
          pullMaxRef.current = 0;
          setTopPullDy(0);
        } else {
          touchStartYRef.current = null;
          // –ï—Å–ª–∏ —Å—Ç–∞—Ä—Ç—É–µ–º –∂–µ—Å—Ç –Ω–µ –∏–∑ –≤–µ—Ä—Ö–Ω–µ–≥–æ –∫—Ä–∞—è ‚Äî —Å–∫—Ä—ã–≤–∞–µ–º —Ç–∏–∑–µ—Ä
          if (showArchiveTeaser) setShowArchiveTeaser(false);
        }
      }}
      onTouchMove={(e) => {
        if (!isMobile) return;
        if (touchStartYRef.current == null) return;
        const dy = e.touches[0].clientY - touchStartYRef.current;
        if (dy > 0) pullMaxRef.current = Math.max(pullMaxRef.current, dy);
        const TEASER_SHOW = 40;
        if (dy > TEASER_SHOW) {
          setShowArchiveTeaser(true);
          setTopPullDy(dy);
        } else {
          setShowArchiveTeaser(false);
          setTopPullDy(0);
        }
        // –°–≤–∏–ø –≤–≤–µ—Ä—Ö ‚Äî —É–±–∏—Ä–∞–µ–º —Ç–∏–∑–µ—Ä
        if (dy < -10 && showArchiveTeaser) setShowArchiveTeaser(false);
      }}
      onTouchEnd={() => {
        if (!isMobile) return;
        const TEASER_SHOW = 40;
        const OPEN_TRIGGER = 110;
        if (pullMaxRef.current >= OPEN_TRIGGER) {
          setShowArchiveTeaser(false);
          setTopPullDy(0);
          blockClicksUntilRef.current = Date.now() + 350;
          onOpenArchive && onOpenArchive();
        } else {
          // –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚Äî —É–±–∏—Ä–∞–µ–º —Ç–∏–∑–µ—Ä –ø–æ—Å–ª–µ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è
          setShowArchiveTeaser(false);
          setTopPullDy(0);
        }
        touchStartYRef.current = null;
        pullMaxRef.current = 0;
      }}
    >
      {isMobile && showArchiveTeaser && (
        <div
          style={{
            margin: '8px 12px 0',
            padding: '10px 12px',
            borderRadius: 10,
            border: '1px solid rgba(255,255,255,0.14)',
            background: 'rgba(255,255,255,0.05)',
            color: 'var(--theme-text-primary)',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            gap: 8,
            fontWeight: 600,
          }}
          onClick={(e) => {
            e.preventDefault();
            e.stopPropagation();
            setShowArchiveTeaser(false);
            blockClicksUntilRef.current = Date.now() + 250;
            onOpenArchive && onOpenArchive();
          }}
        >
          <span role="img" aria-label="archive">üóÑÔ∏è</span>
          <span>{topPullDy >= 110 ? '–û—Ç–ø—É—Å—Ç–∏—Ç–µ ‚Äî –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –∞—Ä—Ö–∏–≤' : '–ü–æ—Ç—è–Ω–∏—Ç–µ –µ—â—ë ‚Äî –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –∞—Ä—Ö–∏–≤'}</span>
        </div>
      )}
      {/* AI Chat */}
      <div
        className={`${styles.chatItem} ${showAIChat ? styles.selected : ''}`}
        style={showArchiveTeaser ? { pointerEvents: 'none' } : undefined}
        onClick={(e) => {
          if (showArchiveTeaser) return; // –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –ò–ò, –∫–æ–≥–¥–∞ –≤–∏–¥–µ–Ω —Ç–∏–∑–µ—Ä
          if (Date.now() < blockClicksUntilRef.current) return; // –ø–æ–¥–∞–≤–∏—Ç—å –∫–ª–∏–∫–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∂–µ—Å—Ç–∞
          onAIChatSelect && onAIChatSelect(e);
        }}
      >
        {/* –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –ê–≤–∞—Ç–∞—Ä–∫–∞ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º */}
        <div className={styles.chatAvatarContainer}>
          <div className={`${styles.chatAvatar} ${styles.aiAvatar}`}>
            <FiZap size={20} />
          </div>
          <div className={styles.onlineIndicator}></div>
        </div>

        {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å - –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ */}
        <div className={styles.chatContent}>
          <div className={styles.chatName}>AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç</div>
          <div className={styles.lastMessage}>Google Gemini 2.0 Flash</div>
        </div>

        {/* –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <div className={styles.chatMeta}>
          <div className={styles.chatTime}>–°–µ–π—á–∞—Å</div>
          <div className={styles.messageStatus}>
            <span className={styles.statusIcon}>ü§ñ</span>
          </div>
        </div>
      </div>

      {list.map((chat) => (
        <SwipeableChatItem
          key={chat._id}
          isMobile={isMobile}
          onDelete={() => requestDeleteChat(chat)}
          onArchive={() => requestArchiveChat(chat)}
          onMute={() => handleMuteChat(chat)}
          onMore={(e) => handleContextMenu(e, chat)}
        >
          <div
            className={`${styles.chatItem} ${selectedChat?._id === chat._id ? styles.selected : ''}`}
            onClick={(e) => {
              if (showArchiveTeaser) return;
              if (Date.now() < blockClicksUntilRef.current) return;
              // server: mark read (–±–µ–∑–æ–ø–∞—Å–Ω–æ, –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç)
              try { axios.put(`/chat/${chat._id}/read`); } catch {}
              onChatSelect(chat);
            }}
            onContextMenu={(e) => handleContextMenu(e, chat)}
            onTouchStart={(e) => {
              if (!isMobile) return;
              if (!e.touches || e.touches.length !== 1) return;
              itemTouchStartRef.current = { id: chat._id, y: e.touches[0].clientY };
              setPullUpState({ id: null, dy: 0 });
            }}
            onTouchMove={(e) => {
              if (!isMobile) return;
              if (!e.touches || e.touches.length !== 1) return;
              const start = itemTouchStartRef.current;
              if (!start || start.id !== chat._id) return;
              const dy = e.touches[0].clientY - start.y; // up is negative
              const PREVIEW = -30;
              if (dy <= PREVIEW) {
                // show preview banner
                setPullUpState({ id: chat._id, dy });
              } else if (pullUpState.id) {
                // cancel preview if moved back down
                setPullUpState({ id: null, dy: 0 });
              }
            }}
            onTouchEnd={() => {
              if (!isMobile) return;
              const start = itemTouchStartRef.current;
              if (!start || start.id !== chat._id) return;
              const dy = pullUpState.id === chat._id ? pullUpState.dy : 0;
              const TRIGGER = -90;
              if (dy <= TRIGGER) {
                // trigger archive
                requestArchiveChat(chat);
              }
              setPullUpState({ id: null, dy: 0 });
              itemTouchStartRef.current = { id: null, y: 0 };
            }}
          >
            {/* –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –ê–≤–∞—Ç–∞—Ä–∫–∞ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º */}
            <div className={styles.chatAvatarContainer}>
              <div className={styles.chatAvatar}>
                {getChatAvatar(chat) ? (
                  <img src={getChatAvatar(chat)} alt={getChatName(chat)} />
                ) : (
                  <span>{getChatName(chat)?.charAt(0)?.toUpperCase()}</span>
                )}
              </div>
              {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞ */}
              {chat.type === 'private' && (() => {
                const otherParticipant = chat.participants?.find(p => p && p._id !== user._id);
                const userStatus = getUserStatus(otherParticipant?._id);
                return (
                  <div style={{
                    position: 'absolute',
                    bottom: '2px',
                    right: '2px',
                    zIndex: 1
                  }}>
                    <OnlineStatusIndicator
                      userId={otherParticipant?._id}
                      isOnline={userStatus.isOnline}
                      lastSeen={userStatus.lastSeen}
                      showText={false}
                      size="small"
                    />
                  </div>
                );
              })()}
              {/* –ì—Ä—É–ø–ø–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä */}
              {chat.type === 'group' && (
                <div className={styles.groupIndicator}>
                  <FiUsers size={10} />
                </div>
              )}
            </div>

            {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å - –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ */}
            <div className={styles.chatContent}>
              <div className={styles.chatName}>{getChatName(chat)}</div>
              <div className={styles.lastMessage}>{getLastMessagePreview(chat)}</div>
            </div>

            {/* –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
            <div className={styles.chatMeta}>
              <div className={styles.chatTime}>
                {chat.lastMessage ? formatTime(chat.lastMessage.createdAt) : ''}
              </div>
              <div className={styles.messageStatus}></div>
            </div>

            {/* Pull-up-to-archive banner */}
            {isMobile && pullUpState.id === chat._id && (
              <div
                style={{
                  position: 'absolute',
                  left: 12,
                  right: 12,
                  top: 4,
                  padding: '6px 10px',
                  borderRadius: 8,
                  background: 'rgba(255,255,255,0.08)',
                  border: '1px solid rgba(255,255,255,0.14)',
                  color: 'var(--theme-text-primary)',
                  fontSize: 12,
                  textAlign: 'center',
                  pointerEvents: 'none',
                }}
              >
                {pullUpState.dy <= -90 ? '–û—Ç–ø—É—Å—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å' : '–¢—è–Ω–∏—Ç–µ –≤–≤–µ—Ä—Ö, —á—Ç–æ–±—ã –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å'}
              </div>
            )}
          </div>
        </SwipeableChatItem>
      ))}

      {/* –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é */}
      <ChatContextMenu
        isOpen={contextMenu.isOpen}
        position={contextMenu.position}
        chat={contextMenu.chat}
        onClose={closeContextMenu}
        onDelete={() => requestDeleteChat(contextMenu.chat)}
        onArchive={() => requestArchiveChat(contextMenu.chat)}
        onMute={() => handleMuteChat(contextMenu.chat)}
        onViewProfile={() => handleViewProfile(contextMenu.chat)}
        onChatSettings={() => handleChatSettings(contextMenu.chat)}
      />

      {/* –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –º–µ–Ω—é —á–∞—Ç–∞ */}
      <UserProfileModal
        user={profileUser}
        isOpen={isProfileOpen}
        onClose={() => setIsProfileOpen(false)}
        isOwnProfile={false}
      />

      {/* –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π */}
      <ConfirmModal
        open={confirm.open}
        title={confirm.title}
        message={confirm.message}
        onCancel={() => setConfirm(prev => ({ ...prev, open: false }))}
        onConfirm={() => {
          const fn = confirm.onConfirm;
          setConfirm(prev => ({ ...prev, open: false }));
          fn && fn();
        }}
      />
    </div>
  );
};

export default ChatList;

