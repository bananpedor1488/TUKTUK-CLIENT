import React, { useState } from 'react';
import { FiUsers, FiCircle, FiZap } from 'react-icons/fi';
import { formatLastSeen, formatChatTime } from '../utils/timeUtils';
import { useAuth } from '../contexts/AuthContext';
import { useSocket } from '../contexts/SocketContext';
import SwipeableChatItem from './SwipeableChatItem';
import ChatContextMenu from './ChatContextMenu';
import useIsMobile from '../hooks/useIsMobile';
import styles from './ChatList.module.css';

const ChatList = ({ chats, selectedChat, onChatSelect, isLoading, showAIChat, onAIChatSelect }) => {
  const { user } = useAuth();
  const { isUserOnline, getUserStatus } = useSocket();
  const isMobile = useIsMobile();
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
  const [contextMenu, setContextMenu] = useState({
    isOpen: false,
    position: { x: 0, y: 0 },
    chat: null
  });
  
  if (isLoading) {
    return (
      <div className={styles.loadingContainer}>
        <div className={styles.loadingSpinner}></div>
        <p className={styles.loadingText}>–ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–æ–≤...</p>
      </div>
    );
  }

  if (chats.length === 0) {
    return (
      <div className={styles.emptyState}>
        <div className={styles.emptyIcon}>üí¨</div>
        <p className={styles.emptyText}>–ß–∞—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</p>
        <p className={styles.emptySubtext}>–ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –±–µ—Å–µ–¥—É!</p>
      </div>
    );
  }

  const formatTime = (date) => {
    return formatChatTime(date);
  };

  const getChatName = (chat) => {
    if (chat.type === 'group') {
      return chat.name || '–ì—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç';
    } else {
      // For private chats, show the other participant's name
      const otherParticipant = chat.participants?.find(p => p && p._id !== user._id);
      return otherParticipant?.displayName || otherParticipant?.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    }
  };

  const getChatAvatar = (chat) => {
    if (chat.type === 'group') {
      return chat.avatar;
    } else {
      // For private chats, show the other participant's avatar
      const otherParticipant = chat.participants?.find(p => p && p._id !== user._id);
      return otherParticipant?.avatar;
    }
  };

  const getLastMessagePreview = (chat) => {
    if (!chat.lastMessage) {
      return '–°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç';
    }

    const message = chat.lastMessage;
    if (message.type === 'text') {
      return message.content.length > 50 
        ? message.content.substring(0, 50) + '...'
        : message.content;
    } else {
      return `üìé ${message.type}`;
    }
  };

  const getUnreadCount = (chat) => {
    // This would be calculated based on user's last read message
    // For now, return 0
    return 0;
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å —á–∞—Ç–∞–º–∏
  const handleDeleteChat = (chat) => {
    console.log('–£–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞:', chat);
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞
    // onDeleteChat?.(chat);
  };

  const handleArchiveChat = (chat) => {
    console.log('–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞:', chat);
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è —á–∞—Ç–∞
    // onArchiveChat?.(chat);
  };

  const handleMuteChat = (chat) => {
    console.log('–û—Ç–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞:', chat);
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    // onMuteChat?.(chat);
  };

  const handleViewProfile = (chat) => {
    console.log('–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è —á–∞—Ç–∞:', chat);
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è
    // onViewProfile?.(chat);
  };

  const handleChatSettings = (chat) => {
    console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞:', chat);
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–∞
    // onChatSettings?.(chat);
  };

  const handleContextMenu = (e, chat) => {
    e.preventDefault();
    setContextMenu({
      isOpen: true,
      position: { x: e.clientX, y: e.clientY },
      chat: chat
    });
  };

  const closeContextMenu = () => {
    setContextMenu({
      isOpen: false,
      position: { x: 0, y: 0 },
      chat: null
    });
  };

  const getOnlineStatus = (chat) => {
    if (chat.type === 'group') {
      const onlineCount = chat.participants?.filter(p => {
        if (!p) return false;
        const userStatus = getUserStatus(p._id);
        return userStatus.isOnline;
      }).length || 0;
      return onlineCount > 0 ? (
        <span style={{ color: '#10B981', fontSize: '12px' }}>
          {onlineCount} –æ–Ω–ª–∞–π–Ω
        </span>
      ) : null;
    } else {
      const otherParticipant = chat.participants?.find(p => p && p._id !== user._id);
      const userStatus = getUserStatus(otherParticipant?._id);
      return userStatus.isOnline ? (
        <span style={{ color: '#10B981', fontSize: '12px' }}>
          <FiCircle size={8} fill="currentColor" style={{ marginRight: '4px' }} />
          –û–Ω–ª–∞–π–Ω
        </span>
      ) : (
        <span style={{ color: '#6B7280', fontSize: '12px' }}>
          –ë—ã–ª –≤ —Å–µ—Ç–∏ {formatLastSeen(userStatus.lastSeen)}
        </span>
      );
    }
  };

  return (
    <div className={styles.chatList}>
      {/* AI Chat */}
      <div
        className={`${styles.chatItem} ${showAIChat ? styles.selected : ''}`}
        onClick={onAIChatSelect}
      >
        {/* –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –ê–≤–∞—Ç–∞—Ä–∫–∞ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º */}
        <div className={styles.chatAvatarContainer}>
          <div className={`${styles.chatAvatar} ${styles.aiAvatar}`}>
            <FiZap size={20} />
          </div>
          <div className={styles.onlineIndicator}></div>
        </div>

        {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å - –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ */}
        <div className={styles.chatContent}>
          <div className={styles.chatName}>AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç</div>
          <div className={styles.lastMessage}>Google Gemini 2.0 Flash</div>
        </div>

        {/* –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <div className={styles.chatMeta}>
          <div className={styles.chatTime}>–°–µ–π—á–∞—Å</div>
          <div className={styles.messageStatus}>
            <span className={styles.statusIcon}>ü§ñ</span>
          </div>
        </div>
      </div>

      {chats.map((chat, index) => (
        <SwipeableChatItem
          key={`${chat._id}-${index}`}
          isMobile={isMobile}
          onDelete={() => handleDeleteChat(chat)}
          onArchive={() => handleArchiveChat(chat)}
          onMute={() => handleMuteChat(chat)}
          onMore={(e) => handleContextMenu(e, chat)}
        >
          <div
            className={`${styles.chatItem} ${selectedChat?._id === chat._id ? styles.selected : ''}`}
            onClick={() => onChatSelect(chat)}
            onContextMenu={(e) => handleContextMenu(e, chat)}
          >
            {/* –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –ê–≤–∞—Ç–∞—Ä–∫–∞ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º */}
            <div className={styles.chatAvatarContainer}>
              <div className={styles.chatAvatar}>
                {getChatAvatar(chat) ? (
                  <img src={getChatAvatar(chat)} alt={getChatName(chat)} />
                ) : (
                  <span>{getChatName(chat)?.charAt(0)?.toUpperCase()}</span>
                )}
              </div>
              {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞ */}
              {chat.type === 'private' && (() => {
                const otherParticipant = chat.participants?.find(p => p && p._id !== user._id);
                return otherParticipant?.isOnline && (
                  <div className={styles.onlineIndicator}></div>
                );
              })()}
              {/* –ì—Ä—É–ø–ø–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä */}
              {chat.type === 'group' && (
                <div className={styles.groupIndicator}>
                  <FiUsers size={10} />
                </div>
              )}
            </div>

            {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å - –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ */}
            <div className={styles.chatContent}>
              <div className={styles.chatName}>{getChatName(chat)}</div>
              <div className={styles.lastMessage}>{getLastMessagePreview(chat)}</div>
            </div>

            {/* –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
            <div className={styles.chatMeta}>
              <div className={styles.chatTime}>
                {chat.lastMessage ? formatTime(chat.lastMessage.createdAt) : ''}
              </div>
              <div className={styles.messageStatus}>
                {getUnreadCount(chat) > 0 && (
                  <div className={styles.unreadCounter}>
                    {getUnreadCount(chat)}
                  </div>
                )}
              </div>
            </div>
          </div>
        </SwipeableChatItem>
      ))}

      {/* –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é */}
      <ChatContextMenu
        isOpen={contextMenu.isOpen}
        position={contextMenu.position}
        chat={contextMenu.chat}
        onClose={closeContextMenu}
        onDelete={() => handleDeleteChat(contextMenu.chat)}
        onArchive={() => handleArchiveChat(contextMenu.chat)}
        onMute={() => handleMuteChat(contextMenu.chat)}
        onViewProfile={() => handleViewProfile(contextMenu.chat)}
        onChatSettings={() => handleChatSettings(contextMenu.chat)}
      />
    </div>
  );
};

export default ChatList;

