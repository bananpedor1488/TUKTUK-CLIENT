import React, { useState, useEffect } from 'react';
import { FiX, FiSun, FiMoon, FiVolume2, FiVolumeX, FiBell, FiBellOff, FiEye, FiEyeOff } from 'react-icons/fi';
import styles from './SettingsModal.module.css';

const SettingsModal = ({ isOpen, onClose }) => {
  const [settings, setSettings] = useState({
    theme: 'dark',
    soundEnabled: true,
    notificationsEnabled: true,
    fontSize: 'medium',
    language: 'ru',
    autoSave: true,
    showOnlineStatus: true,
    messagePreview: true,
    animationType: 'slideFromRight',
    quickReaction: '‚ù§Ô∏è'
  });

  // Load quick reaction from localStorage on open
  useEffect(() => {
    if (isOpen) {
      try {
        const saved = localStorage.getItem('tuktuk-quick-reaction');
        if (saved) setSettings(prev => ({ ...prev, quickReaction: saved }));
      } catch (_) {}
    }
  }, [isOpen]);

  const handleSettingChange = (key, value) => {
    setSettings(prev => ({
      ...prev,
      [key]: value
    }));

    if (key === 'quickReaction') {
      try { localStorage.setItem('tuktuk-quick-reaction', value); } catch (_) {}
    }
  };

  const handleSave = () => {
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    console.log('Settings saved:', settings);
    onClose();
  };

  const handleCancel = () => {
    onClose();
  };

  if (!isOpen) return null;

  return (
    <div className={styles.modalOverlay} onClick={onClose}>
      <div className={styles.modalContent} onClick={(e) => e.stopPropagation()}>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className={styles.modalHeader}>
          <h2 className={styles.modalTitle}>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</h2>
          <button className={styles.closeButton} onClick={onClose}>
            <FiX size={20} />
          </button>
        </div>

        {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ */}
        <div className={styles.modalBody}>
          {/* –í–Ω–µ—à–Ω–∏–π –≤–∏–¥ */}
          <div className={styles.settingsSection}>
            <h3 className={styles.sectionTitle}>–í–Ω–µ—à–Ω–∏–π –≤–∏–¥</h3>
            
            <div className={styles.settingItem}>
              <div className={styles.settingInfo}>
                <label className={styles.settingLabel}>–¢–µ–º–∞</label>
                <span className={styles.settingDescription}>–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–µ—Ç–ª—É—é –∏–ª–∏ —Ç–µ–º–Ω—É—é —Ç–µ–º—É</span>
              </div>
              <div className={styles.settingControl}>
                <button
                  className={`${styles.themeButton} ${settings.theme === 'light' ? styles.active : ''}`}
                  onClick={() => handleSettingChange('theme', 'light')}
                >
                  <FiSun size={16} />
                  –°–≤–µ—Ç–ª–∞—è
                </button>
                <button
                  className={`${styles.themeButton} ${settings.theme === 'dark' ? styles.active : ''}`}
                  onClick={() => handleSettingChange('theme', 'dark')}
                >
                  <FiMoon size={16} />
                  –¢–µ–º–Ω–∞—è
                </button>
              </div>
            </div>

            <div className={styles.settingItem}>
              <div className={styles.settingInfo}>
                <label className={styles.settingLabel}>–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞</label>
                <span className={styles.settingDescription}>–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞</span>
              </div>
              <div className={styles.settingControl}>
                <select
                  className={styles.select}
                  value={settings.fontSize}
                  onChange={(e) => handleSettingChange('fontSize', e.target.value)}
                >
                  <option value="small">–ú–∞–ª–µ–Ω—å–∫–∏–π</option>
                  <option value="medium">–°—Ä–µ–¥–Ω–∏–π</option>
                  <option value="large">–ë–æ–ª—å—à–æ–π</option>
                </select>
              </div>
            </div>

            <div className={styles.settingItem}>
              <div className={styles.settingInfo}>
                <label className={styles.settingLabel}>–ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤</label>
                <span className={styles.settingDescription}>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞—Ö –º–µ–∂–¥—É —á–∞—Ç–∞–º–∏</span>
              </div>
              <div className={styles.settingControl}>
                <div className={styles.animationButtons}>
                  <button
                    className={`${styles.animationButton} ${settings.animationType === 'slideFromRight' ? styles.active : ''}`}
                    onClick={() => handleSettingChange('animationType', 'slideFromRight')}
                    title="–°–¥–≤–∏–≥ —Å–ø—Ä–∞–≤–∞"
                  >
                    ‚Üí
                  </button>
                  <button
                    className={`${styles.animationButton} ${settings.animationType === 'scaleIn' ? styles.active : ''}`}
                    onClick={() => handleSettingChange('animationType', 'scaleIn')}
                    title="–ú—è–≥–∫–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ"
                  >
                    ‚ö°
                  </button>
                  <button
                    className={`${styles.animationButton} ${settings.animationType === 'fadeIn' ? styles.active : ''}`}
                    onClick={() => handleSettingChange('animationType', 'fadeIn')}
                    title="Fade-—ç—Ñ—Ñ–µ–∫—Ç"
                  >
                    ‚ú®
                  </button>
                </div>
              </div>
            </div>
          </div>

          {/* –ó–≤—É–∫ */}
          <div className={styles.settingsSection}>
            <h3 className={styles.sectionTitle}>–ó–≤—É–∫</h3>
            
            <div className={styles.settingItem}>
              <div className={styles.settingInfo}>
                <label className={styles.settingLabel}>–ó–≤—É–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</label>
                <span className={styles.settingDescription}>–í–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π</span>
              </div>
              <div className={styles.settingControl}>
                <button
                  className={`${styles.toggleButton} ${settings.soundEnabled ? styles.active : ''}`}
                  onClick={() => handleSettingChange('soundEnabled', !settings.soundEnabled)}
                >
                  {settings.soundEnabled ? <FiVolume2 size={16} /> : <FiVolumeX size={16} />}
                </button>
              </div>
            </div>
          </div>

          {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
          <div className={styles.settingsSection}>
            <h3 className={styles.sectionTitle}>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h3>
            
            <div className={styles.settingItem}>
              <div className={styles.settingInfo}>
                <label className={styles.settingLabel}>Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</label>
                <span className={styles.settingDescription}>–ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö</span>
              </div>
              <div className={styles.settingControl}>
                <button
                  className={`${styles.toggleButton} ${settings.notificationsEnabled ? styles.active : ''}`}
                  onClick={() => handleSettingChange('notificationsEnabled', !settings.notificationsEnabled)}
                >
                  {settings.notificationsEnabled ? <FiBell size={16} /> : <FiBellOff size={16} />}
                </button>
              </div>
            </div>

            <div className={styles.settingItem}>
              <div className={styles.settingInfo}>
                <label className={styles.settingLabel}>–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –æ–Ω–ª–∞–π–Ω</label>
                <span className={styles.settingDescription}>–î—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤–∏–¥—è—Ç –≤–∞—à —Å—Ç–∞—Ç—É—Å</span>
              </div>
              <div className={styles.settingControl}>
                <button
                  className={`${styles.toggleButton} ${settings.showOnlineStatus ? styles.active : ''}`}
                  onClick={() => handleSettingChange('showOnlineStatus', !settings.showOnlineStatus)}
                >
                  {settings.showOnlineStatus ? <FiEye size={16} /> : <FiEyeOff size={16} />}
                </button>
              </div>
            </div>
          </div>

          {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ */}
          <div className={styles.settingsSection}>
            <h3 className={styles.sectionTitle}>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ</h3>
            
            <div className={styles.settingItem}>
              <div className={styles.settingInfo}>
                <label className={styles.settingLabel}>–ë—ã—Å—Ç—Ä–∞—è —Ä–µ–∞–∫—Ü–∏—è</label>
                <span className={styles.settingDescription}>–≠–º–æ–¥–∑–∏ –ø–æ –¥–≤–æ–π–Ω–æ–º—É –∫–ª–∏–∫—É/—Ç–∞–ø—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ</span>
              </div>
              <div className={styles.settingControl}>
                <select
                  className={styles.select}
                  value={settings.quickReaction}
                  onChange={(e) => handleSettingChange('quickReaction', e.target.value)}
                >
                  {['‚ù§Ô∏è','üëç','üòÇ','üî•','üëè','üíØ','üòÆ','üò¢','üòé','üôè','ü§Ø'].map(em => (
                    <option key={em} value={em}>{em}</option>
                  ))}
                </select>
              </div>
            </div>

            <div className={styles.settingItem}>
              <div className={styles.settingInfo}>
                <label className={styles.settingLabel}>–Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞</label>
                <span className={styles.settingDescription}>–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</span>
              </div>
              <div className={styles.settingControl}>
                <select
                  className={styles.select}
                  value={settings.language}
                  onChange={(e) => handleSettingChange('language', e.target.value)}
                >
                  <option value="ru">–†—É—Å—Å–∫–∏–π</option>
                  <option value="en">English</option>
                  <option value="es">Espa√±ol</option>
                </select>
              </div>
            </div>

            <div className={styles.settingItem}>
              <div className={styles.settingInfo}>
                <label className={styles.settingLabel}>–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ</label>
                <span className={styles.settingDescription}>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫–∏</span>
              </div>
              <div className={styles.settingControl}>
                <button
                  className={`${styles.toggleButton} ${settings.autoSave ? styles.active : ''}`}
                  onClick={() => handleSettingChange('autoSave', !settings.autoSave)}
                >
                  {settings.autoSave ? '‚úì' : '‚úó'}
                </button>
              </div>
            </div>
          </div>
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
        <div className={styles.modalFooter}>
          <button className={styles.cancelButton} onClick={handleCancel}>
            –û—Ç–º–µ–Ω–∞
          </button>
          <button className={styles.saveButton} onClick={handleSave}>
            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
          </button>
        </div>
      </div>
    </div>
  );
};

export default SettingsModal;
