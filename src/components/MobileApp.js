import React, { useState, useEffect } from 'react';
import { useAuth } from '../contexts/AuthContext';
import { useSocket } from '../contexts/SocketContext';
import MobileChatList from './MobileChatList';
import MobileChat from './MobileChat';
import AIChatWindow from './AIChatWindow';
import styles from './MobileApp.module.css';

const MobileApp = () => {
  const [currentView, setCurrentView] = useState('chatList'); // 'chatList', 'chat', 'aiChat'
  const [selectedChat, setSelectedChat] = useState(null);
  const [chats, setChats] = useState([]);
  const [messages, setMessages] = useState([]);
  const [isLoading, setIsLoading] = useState(true);

  const { user } = useAuth();
  const { socket, isConnected, sendMessage } = useSocket();

  // –ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–æ–≤
  useEffect(() => {
    const loadChats = async () => {
      try {
        setIsLoading(true);
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç API –≤—ã–∑–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤
        // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        setChats([
          {
            _id: '1',
            type: 'private',
            participants: [
              { _id: user?._id, displayName: user?.displayName },
              { _id: '2', displayName: '–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞', avatar: null, isOnline: true }
            ],
            lastMessage: {
              content: '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?',
              createdAt: new Date().toISOString(),
              sender: '2'
            },
            unreadCount: 2
          },
          {
            _id: '3',
            type: 'group',
            name: '–†–∞–±–æ—á–∞—è –≥—Ä—É–ø–ø–∞',
            participants: [
              { _id: user?._id, displayName: user?.displayName },
              { _id: '4', displayName: '–ò–≤–∞–Ω –°–∏–¥–æ—Ä–æ–≤' },
              { _id: '5', displayName: '–ú–∞—Ä–∏—è –ö–æ–∑–ª–æ–≤–∞' }
            ],
            lastMessage: {
              content: '–í—Å—Ç—Ä–µ—á–∞–µ–º—Å—è –≤ 15:00',
              createdAt: new Date(Date.now() - 3600000).toISOString(),
              sender: '4'
            },
            unreadCount: 0
          }
        ]);
      } catch (error) {
        console.error('Error loading chats:', error);
      } finally {
        setIsLoading(false);
      }
    };

    loadChats();
  }, [user]);

  // Socket event listeners
  useEffect(() => {
    if (socket) {
      socket.on('new_message', (message) => {
        // Update chat list
        setChats(prevChats => {
          const updatedChats = prevChats.map(chat => {
            if (chat._id === message.chat) {
              return {
                ...chat,
                lastMessage: message,
                updatedAt: new Date(message.createdAt)
              };
            }
            return chat;
          });
          
          // Sort chats by updatedAt
          return updatedChats.sort((a, b) => new Date(b.updatedAt) - new Date(a.updatedAt));
        });

        // Update messages if it's the current chat
        if (selectedChat && selectedChat._id === message.chat) {
          setMessages(prev => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º –∂–µ —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
            const optimisticIndex = prev.findIndex(msg => 
              msg.isOptimistic && 
              msg.content === message.content && 
              msg.sender._id === message.sender._id
            );
            
            if (optimisticIndex !== -1) {
              // –ó–∞–º–µ–Ω—è–µ–º –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ
              const newMessages = [...prev];
              newMessages[optimisticIndex] = { ...message, disableAnimation: true };
              return newMessages;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            const messageExists = prev.some(msg => msg._id === message._id);
            if (messageExists) {
              return prev;
            }
            
            return [...prev, message];
          });
        }
      });

      socket.on('chat_updated', (data) => {
        setChats(prevChats => {
          const updatedChats = prevChats.map(chat => {
            if (chat._id === data.chatId) {
              return {
                ...chat,
                lastMessage: data.lastMessage,
                updatedAt: new Date(data.updatedAt)
              };
            }
            return chat;
          });
          
          // Sort chats by updatedAt
          const sortedChats = updatedChats.sort((a, b) => new Date(b.updatedAt) - new Date(a.updatedAt));
          return sortedChats;
        });
      });

      return () => {
        socket.off('new_message');
        socket.off('chat_updated');
      };
    }
  }, [socket, selectedChat]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
  useEffect(() => {
    if (selectedChat) {
      const loadMessages = async () => {
        try {
          // –ó–¥–µ—Å—å –±—É–¥–µ—Ç API –≤—ã–∑–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
          // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
          setMessages([
            {
              _id: '1',
              content: '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?',
              sender: '2',
              createdAt: new Date(Date.now() - 3600000).toISOString(),
              type: 'text'
            },
            {
              _id: '2',
              content: '–ü—Ä–∏–≤–µ—Ç! –í—Å—ë —Ö–æ—Ä–æ—à–æ, —Å–ø–∞—Å–∏–±–æ! –ê —É —Ç–µ–±—è –∫–∞–∫?',
              sender: user?._id,
              createdAt: new Date(Date.now() - 3000000).toISOString(),
              type: 'text'
            },
            {
              _id: '3',
              content: '–û—Ç–ª–∏—á–Ω–æ! –†–∞–±–æ—Ç–∞—é –Ω–∞–¥ –Ω–æ–≤—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º',
              sender: '2',
              createdAt: new Date(Date.now() - 1800000).toISOString(),
              type: 'text'
            }
          ]);
        } catch (error) {
          console.error('Error loading messages:', error);
        }
      };

      loadMessages();
    }
  }, [selectedChat, user]);

  const handleChatSelect = (chat) => {
    setSelectedChat(chat);
    setCurrentView('chat');
  };

  const handleAIChatSelect = () => {
    setCurrentView('aiChat');
  };

  const handleBackToChatList = () => {
    setCurrentView('chatList');
    setSelectedChat(null);
  };

  const handleSendMessage = async (messageContent) => {
    if (!selectedChat || !messageContent.trim()) return;

    try {
      // Create optimistic message
      const optimisticMessage = {
        _id: `temp_${Date.now()}`,
        chat: selectedChat._id,
        sender: {
          _id: user._id,
          username: user.username,
          displayName: user.displayName,
          avatar: user.avatar
        },
        content: messageContent,
        type: 'text',
        createdAt: new Date().toISOString(),
        isOptimistic: true
      };

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setMessages(prev => [...prev, optimisticMessage]);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ WebSocket
      if (socket && isConnected) {
        sendMessage(selectedChat._id, messageContent);
      }

    } catch (error) {
      console.error('üì± Mobile: Error sending message:', error);
    }
  };

  const handleNewChat = () => {
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
    console.log('Creating new chat');
  };

  return (
    <div className={styles.mobileApp}>
      {currentView === 'chatList' && (
        <MobileChatList
          chats={chats}
          onChatSelect={handleChatSelect}
          onAIChatSelect={handleAIChatSelect}
          onNewChat={handleNewChat}
          currentUser={user}
          isLoading={isLoading}
        />
      )}

      {currentView === 'chat' && selectedChat && (
        <MobileChat
          chat={selectedChat}
          onBackToChatList={handleBackToChatList}
          onSendMessage={handleSendMessage}
          messages={messages}
          currentUser={user}
        />
      )}

      {currentView === 'aiChat' && (
        <div className={styles.aiChatContainer}>
          <AIChatWindow onClose={handleBackToChatList} />
        </div>
      )}
    </div>
  );
};

export default MobileApp;

