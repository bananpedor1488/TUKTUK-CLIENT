import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { useAuth } from '../contexts/AuthContext';
import { useSocket } from '../contexts/SocketContext';
import { useTheme } from '../contexts/ThemeContext';
import { FiCircle, FiUser } from 'react-icons/fi';
import ChatList from '../components/ChatList';
import ChatWindow from '../components/ChatWindow';
import AIChatWindow from '../components/AIChatWindow';
import UserProfileModal from '../components/UserProfileModal';
import SettingsModalTabs from '../components/SettingsModalTabs';
import UserAvatarDropdown from '../components/UserAvatarDropdown';
import WalletModal from '../components/WalletModal';
import ArchivedChatList from '../components/ArchivedChatList';
import MobileNavigation from '../components/MobileNavigation';
import MobileProfilePage from '../components/MobileProfilePage';
import SearchButton from '../components/SearchButton';
import useIsMobile from '../hooks/useIsMobile';
import styles from './Chat.module.css';

const Chat = () => {
  const [selectedChat, setSelectedChat] = useState(null);
  const [chats, setChats] = useState([]);
  const [users, setUsers] = useState([]);
  const [showUserProfile, setShowUserProfile] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [isLoading, setIsLoading] = useState(true);
  const [showChatList, setShowChatList] = useState(true);
  const [animationType] = useState('slideFromRight'); // 'slideFromRight', 'scaleIn', 'fadeIn'
  const [isAnimating, setIsAnimating] = useState(false);
  const [showDesktopSettings, setShowDesktopSettings] = useState(false);
  const [showMobileSettings, setShowMobileSettings] = useState(false);
  const [currentPage, setCurrentPage] = useState('messages');
  const [showMobileNav, setShowMobileNav] = useState(true); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞/—Å–∫—Ä—ã—Ç–∏—è –º–æ–±–∏–ª—å–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  const [showAIChat, setShowAIChat] = useState(false); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ —á–∞—Ç–∞ —Å –ò–ò
  const [showMobileProfile, setShowMobileProfile] = useState(false); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–æ–±–∏–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ—Ñ–∏–ª—è
  const [showWallet, setShowWallet] = useState(false);

  const { user, logout, isAuthenticated } = useAuth();
  const { socket, isConnected } = useSocket();
  const { theme } = useTheme();
  const [showArchived, setShowArchived] = useState(false); // archive view in sidebar on all devices
  const isMobile = useIsMobile();

  // Load chats on component mount
  useEffect(() => {
    if (isAuthenticated) {
      loadChats();
    }
  }, [isAuthenticated]);

  // Fallback: periodically refresh chat list to ensure it's up to date
  useEffect(() => {
    const refreshInterval = setInterval(() => {
      if (socket && isConnected && isAuthenticated) {
        console.log('üîÑ Periodic chat list refresh');
        loadChats();
      }
    }, 30000); // Refresh every 30 seconds

    return () => clearInterval(refreshInterval);
  }, [socket, isConnected, isAuthenticated]);

  // Socket event listeners
  useEffect(() => {
    if (socket) {
      socket.on('new_message', (message) => {
        setChats(prevChats => {
          const updatedChats = prevChats.map(chat => {
            if (chat._id === message.chat) {
              return {
                ...chat,
                lastMessage: message,
                updatedAt: new Date(message.createdAt)
              };
            }
            return chat;
          });
          
          // Sort chats by updatedAt
          return updatedChats.sort((a, b) => new Date(b.updatedAt) - new Date(a.updatedAt));
        });

        // Update selected chat messages if it's the current chat
        if (selectedChat && selectedChat._id === message.chat) {
          setSelectedChat(prevChat => ({
            ...prevChat,
            messages: [...(prevChat.messages || []), message]
          }));
        }
      });

      // Handle chat updates for chat list
      socket.on('chat_updated', (data) => {
        setChats(prevChats => {
          const updatedChats = prevChats.map(chat => {
            if (chat._id === data.chatId) {
              return {
                ...chat,
                lastMessage: data.lastMessage,
                updatedAt: new Date(data.updatedAt)
              };
            }
            return chat;
          });
          
          // Sort chats by updatedAt
          return updatedChats.sort((a, b) => new Date(b.updatedAt) - new Date(a.updatedAt));
        });
      });

      socket.on('user_typing', (data) => {
        // Handle typing indicator
        console.log('User typing:', data);
      });

      socket.on('user_stopped_typing', (data) => {
        // Handle stop typing indicator
        console.log('User stopped typing:', data);
      });

      return () => {
        socket.off('new_message');
        socket.off('chat_updated');
        socket.off('user_typing');
        socket.off('user_stopped_typing');
      };
    }
  }, [socket, selectedChat]);

  const loadChats = async () => {
    console.log('üì± loadChats –≤—ã–∑–≤–∞–Ω–∞, isAuthenticated:', isAuthenticated);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
    if (!isAuthenticated) {
      console.log('üì± –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —á–∞—Ç–æ–≤');
      setIsLoading(false);
      return;
    }
    
    try {
      console.log('üì± –ó–∞–≥—Ä—É–∂–∞–µ–º —á–∞—Ç—ã...');
      const response = await axios.get('/chat');
      // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ _id
      const uniqueChats = response.data.chats.filter((chat, index, self) => 
        index === self.findIndex(c => c._id === chat._id)
      );
      setChats(uniqueChats);
      console.log('üì± –ß–∞—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', uniqueChats.length);
    } catch (error) {
      console.error('Error loading chats:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const searchUsers = async (query) => {
    if (query.length < 2) {
      setUsers([]);
      return;
    }

    try {
      const response = await axios.get(`/user/search?q=${encodeURIComponent(query)}`);
      setUsers(response.data.users);
    } catch (error) {
      console.error('Error searching users:', error);
    }
  };

  const createChat = async (participantId) => {
    try {
      const response = await axios.post('/chat', {
        participants: [participantId],
        type: 'private'
      });
      
      const newChat = response.data.chat;
      setChats(prevChats => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —á–∞—Ç–∞ —Å —Ç–∞–∫–∏–º ID
        const existingChatIndex = prevChats.findIndex(chat => chat._id === newChat._id);
        if (existingChatIndex !== -1) {
          // –ï—Å–ª–∏ —á–∞—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
          const updatedChats = [...prevChats];
          updatedChats[existingChatIndex] = newChat;
          return updatedChats;
        } else {
          // –ï—Å–ª–∏ —á–∞—Ç–∞ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ
          return [newChat, ...prevChats];
        }
      });
      setSelectedChat(newChat);
      setSearchQuery('');
      setUsers([]);
    } catch (error) {
      console.error('Error creating chat:', error);
    }
  };

  const handleChatSelect = (chat) => {
    if (isAnimating) return; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–ª–∏–∫–∏ –≤–æ –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏

    // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–ª–∏ null (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è) ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω—ë–º—Å—è –∫ —Å–ø–∏—Å–∫—É
    if (!chat) {
      setSelectedChat(null);
      setShowChatList(true);
      setShowAIChat(false);
      if (isMobile) setShowMobileNav(true);
      return;
    }

    setIsAnimating(true);
    setSelectedChat(chat);
    setShowChatList(false);
    setShowAIChat(false); // –ó–∞–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç —Å –ò–ò

    // –°–∫—Ä—ã–≤–∞–µ–º –º–æ–±–∏–ª—å–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —á–∞—Ç
    if (isMobile) {
      setShowMobileNav(false);
    }

    if (socket && isConnected && chat?._id) {
      socket.emit('join_chat', chat._id);
    }

    // –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    setTimeout(() => {
      setIsAnimating(false);
    }, 350);
  };

  const handleAIChatSelect = () => {
    if (isAnimating) return; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–ª–∏–∫–∏ –≤–æ –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏
    
    setIsAnimating(true);
    setShowAIChat(true);
    setSelectedChat(null); // –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Ç
    setShowChatList(false);
    
    // –°–∫—Ä—ã–≤–∞–µ–º –º–æ–±–∏–ª—å–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —á–∞—Ç —Å –ò–ò
    if (isMobile) {
      setShowMobileNav(false);
    }
    
    // –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    setTimeout(() => {
      setIsAnimating(false);
    }, 350);
  };

  const handleBackToChatList = () => {
    if (isAnimating) return; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–ª–∏–∫–∏ –≤–æ –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏
    
    setIsAnimating(true);
    setShowChatList(true);
    setShowAIChat(false); // –ó–∞–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç —Å –ò–ò
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–±–∏–ª—å–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É —á–∞—Ç–æ–≤
    if (isMobile) {
      setShowMobileNav(true);
    }
    
    // –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    setTimeout(() => {
      setIsAnimating(false);
    }, 350);
  };


  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  const handleNavigation = (page) => {
    setCurrentPage(page);
    
    if (page === 'settings') {
      if (isMobile) {
        setShowMobileSettings(true);
        setShowChatList(false); // –°–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç–ª–∏—Å—Ç –Ω–∞ –º–æ–±–∏–ª–∫–µ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        setSelectedChat(null); // –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Ç
        setShowMobileNav(false); // –°–∫—Ä—ã–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
      } else {
        setShowDesktopSettings(true);
      }
    } else if (page === 'messages') {
      // –ü—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º –Ω–∞ –º–æ–±–∏–ª–∫–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Ç–ª–∏—Å—Ç
      if (isMobile) {
        setShowMobileSettings(false);
        setShowChatList(true);
        setSelectedChat(null); // –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Ç
        setShowMobileNav(true); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –≤ —Å–ø–∏—Å–∫–µ —á–∞—Ç–æ–≤
      }
    } else if (page === 'contacts') {
      if (isMobile) {
        setShowMobileSettings(false);
        setShowChatList(false);
        setSelectedChat(null); // –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Ç
        setShowMobileNav(true); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –≤ –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö
      }
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫

  const handleLogout = async () => {
    await logout();
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ—Ñ–∏–ª—è
  const handleProfileClick = () => {
    if (isMobile) {
      setShowMobileProfile(true);
      setShowChatList(false);
      setSelectedChat(null);
      setShowMobileNav(false);
    } else {
      setShowUserProfile(true);
    }
  };

  const handleDesktopSettingsClick = () => {
    setShowDesktopSettings(true);
  };

  const handleOpenArchived = () => {
    setShowArchived(true);
  };

  const handleUnarchived = () => {
    // refresh chat list when some chat was unarchived
    loadChats();
  };

  const handleOpenChatFromArchive = (chat) => {
    // select chat and close archive view/modal
    setShowArchived(false);
    handleChatSelect(chat);
  };

  // const handleThemeToggle = () => {
  //   toggleTheme();
  // };

  const handleMobileProfileClose = () => {
    setShowMobileProfile(false);
    setShowChatList(true);
    setShowMobileNav(true);
  };

  return (
    <div className={styles.chatContainer}>
      {/* Sidebar */}
      <div className={`${styles.sidebar} ${showChatList ? styles.open : ''}`}>
        {/* Header */}
        <div className={styles.sidebarHeader}>
          {!isMobile && (
            <UserAvatarDropdown
              user={user}
              onProfileClick={handleProfileClick}
              onSettingsClick={handleDesktopSettingsClick}
              onArchiveClick={handleOpenArchived}
              onWalletClick={() => setShowWallet(true)}
              onLogout={handleLogout}
              isConnected={isConnected}
            />
          )}
          <h2 className={styles.sidebarTitle}>{(!isMobile && showArchived) ? '–ê—Ä—Ö–∏–≤' : '–ß–∞—Ç—ã'}</h2>
          <SearchButton 
            onSearch={(query) => {
              setSearchQuery(query);
              if (query.trim()) {
                searchUsers(query);
              } else {
                setUsers([]);
              }
            }}
            searchResults={users}
            onUserSelect={(user) => {
              createChat(user._id);
              setUsers([]);
            }}
            placeholder="–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π..."
          />
        </div>


        {/* Chat List */}
        <div className={styles.chatListContainer}>
          {showArchived ? (
            <ArchivedChatList
              onOpenChat={handleOpenChatFromArchive}
              onUnarchive={handleUnarchived}
              onBack={() => setShowArchived(false)}
            />
          ) : (
            <ChatList
              chats={chats}
              selectedChat={selectedChat}
              onChatSelect={handleChatSelect}
              isLoading={isLoading}
              showAIChat={showAIChat}
              onAIChatSelect={handleAIChatSelect}
              onOpenArchive={handleOpenArchived}
            />
          )}
        </div>
      </div>

      {/* Main Content */}
      <div className={`${styles.mainContent} ${
        !showChatList ? styles.hidden : ''
      } ${styles[animationType]} ${
        !showChatList ? styles.active : ''
      }`}>
        {showAIChat ? (
          <AIChatWindow onClose={handleBackToChatList} />
        ) : selectedChat ? (
          <ChatWindow
            chat={selectedChat}
            onChatUpdate={setSelectedChat}
            onBackToChatList={handleBackToChatList}
          />
        ) : (
          <div className={styles.welcomeScreen}>
            <div className={styles.welcomeContent}>
              <h2>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Tuktuk</h2>
              {chats.length === 0 ? (
                <p>–ß–∞—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç. –ù–∞—á–Ω–∏—Ç–µ –æ–±—â–∞—Ç—å—Å—è!</p>
              ) : (
                <p>–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–ª–µ–≤–∞</p>
              )}
            </div>
          </div>
        )}
      </div>

      {/* User Profile Sidebar */}
      {showUserProfile && (
        <UserProfileModal
          user={user}
          isOpen={showUserProfile}
          onClose={() => setShowUserProfile(false)}
          isOwnProfile={true}
        />
      )}


      {/* Mobile Navigation - –¢–û–õ–¨–ö–û –ù–ê –ú–û–ë–ò–õ–¨–ù–´–•! */}
      {(() => {
        // –ñ–ï–°–¢–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê - –ù–ï –†–ï–ù–î–ï–†–ò–¢–¨ –ù–ê –ü–ö –í–û–û–ë–©–ï
        if (typeof window !== 'undefined' && window.innerWidth > 768) {
          return null;
        }
        
        return (
          <MobileNavigation
            onNavigate={handleNavigation}
            onProfileClick={handleProfileClick}
            onWalletClick={() => setShowWallet(true)}
            isVisible={showMobileNav}
          />
        );
      })()}

      {/* Desktop Settings Modal */}
      <SettingsModalTabs
        isOpen={showDesktopSettings}
        onClose={() => setShowDesktopSettings(false)}
        user={user}
      />


      {/* Mobile Profile Page */}
      <MobileProfilePage
        isOpen={showMobileProfile}
        onClose={handleMobileProfileClose}
        user={user}
      />

      {/* Wallet Modal */}
      <WalletModal isOpen={showWallet} onClose={() => setShowWallet(false)} />

    </div>
  );
};

export default Chat;

